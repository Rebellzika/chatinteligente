// Processador de Linguagem Natural Inteligente para o Dinah
// Sistema avan√ßado de IA com reconhecimento de contexto e aprendizado

// Constante para limite de confirma√ß√£o
const CONFIRMATION_LIMIT = 1000; // R$ 1000

// Base de conhecimento sobre bancos e apelidos
const BANK_KNOWLEDGE = {
    // Bancos tradicionais
    'nubank': {
        names: ['nubank', 'nu bank', 'nu', 'roxinho', 'cart√£o roxo', 'nubanco', 'nubank', 'nu banco', 'cart√£o roxo', 'roxinho'],
        type: 'digital',
        category: 'banco digital'
    },
    'itau': {
        names: ['itau', 'ita√∫', 'itau unibanco', 'ita√∫ unibanco', 'itau', 'itaubanco', 'ita√∫ banco', 'itau banco', 'unibanco'],
        type: 'tradicional',
        category: 'banco tradicional'
    },
    'bradesco': {
        names: ['bradesco', 'banco bradesco', 'bradisco', 'bradisco', 'banco bradisco', 'bradisco banco'],
        type: 'tradicional',
        category: 'banco tradicional'
    },
    'santander': {
        names: ['santander', 'banco santander', 'santander banco', 'santander', 'santander'],
        type: 'tradicional',
        category: 'banco tradicional'
    },
    'bb': {
        names: ['bb', 'banco do brasil', 'banco do brasil bb', 'bancodobrasil', 'banco brasil', 'banco do brasil', 'bb banco', 'banco bb'],
        type: 'tradicional',
        category: 'banco p√∫blico'
    },
    'caixa': {
        names: ['caixa', 'caixa econ√¥mica', 'caixa economica', 'caixa econ√¥mica federal', 'caixa economica federal', 'cef', 'caxa', 'caixa federal', 'caixa federal'],
        type: 'tradicional',
        category: 'banco p√∫blico'
    },
    
    // Bancos digitais
    'inter': {
        names: ['inter', 'banco inter', 'bancointer', 'inter medium', 'banco inter', 'inter banco', 'banco inter', 'inter'],
        type: 'digital',
        category: 'banco digital'
    },
    'c6': {
        names: ['c6', 'c6 bank', 'c6bank', 'banco c6', 'c6 banco', 'banco c6', 'c6bank', 'c6 bank'],
        type: 'digital',
        category: 'banco digital'
    },
    'picpay': {
        names: ['picpay', 'pic pay', 'picpay bank', 'pic pay bank', 'picpay banco', 'pic pay banco', 'picpay', 'pic pay'],
        type: 'digital',
        category: 'banco digital'
    },
    'mercado pago': {
        names: ['mercado pago', 'mercadopago', 'mercado pago bank', 'mercadopago bank', 'mercado pago banco', 'mercadopago banco', 'mercado pago', 'mercadopago'],
        type: 'digital',
        category: 'banco digital'
    },
    
    // Apelidos comuns
    'caixinha': {
        names: ['caixinha', 'caixa', 'poupan√ßa', 'poupan√ßa caixa', 'caixa econ√¥mica', 'caixa economica', 'caixinha caixa', 'poupan√ßa caixa econ√¥mica', 'poupan√ßa caixa economica', 'cef poupan√ßa', 'cef poupan√ßa'],
        type: 'tradicional',
        category: 'banco p√∫blico'
    },
    'conta pessoal': {
        names: ['conta pessoal', 'conta pessoal', 'conta principal', 'conta principal', 'conta pessoal', 'conta pessoal', 'conta principal', 'conta principal'],
        type: 'generic',
        category: 'conta principal'
    },
    'conta empresarial': {
        names: ['conta empresarial', 'conta empresa', 'conta business', 'conta trabalho', 'conta empresarial', 'conta empresa', 'conta business', 'conta trabalho'],
        type: 'generic',
        category: 'conta empresarial'
    },
    'pou√ßan√ßa': {
        names: ['pou√ßan√ßa', 'poupan√ßa', 'poupan√ßa caixa', 'caixinha', 'poupan√ßa caixa econ√¥mica', 'poupan√ßa caixa economica', 'poupan√ßa cef', 'poupan√ßa caixa federal', 'poupan√ßa caixa federal'],
        type: 'tradicional',
        category: 'poupan√ßa'
    }
};

// Base de conhecimento sobre contas fixas
const FIXED_BILLS_KNOWLEDGE = {
    'aluguel': {
        category: 'housing',
        commonAmounts: [800, 1000, 1200, 1500, 2000, 2500, 3000],
        dueDays: [5, 10, 15, 20],
        synonyms: ['aluguel', 'rent', 'loca√ß√£o', 'locacao']
    },
    'condom√≠nio': {
        category: 'housing',
        commonAmounts: [200, 300, 400, 500, 600, 800, 1000],
        dueDays: [5, 10, 15, 20],
        synonyms: ['condom√≠nio', 'condominio', 'condo', 'taxa condominial']
    },
    'internet': {
        category: 'subscriptions',
        commonAmounts: [50, 80, 100, 120, 150, 200],
        dueDays: [5, 10, 15, 20],
        synonyms: ['internet', 'wi-fi', 'wifi', 'banda larga', 'provedor']
    },
    'energia': {
        category: 'utilities',
        commonAmounts: [80, 120, 150, 200, 250, 300, 400],
        dueDays: [5, 10, 15, 20],
        synonyms: ['energia', 'luz', 'eletricidade', 'conta de luz', 'conta de energia']
    },
    '√°gua': {
        category: 'utilities',
        commonAmounts: [30, 50, 80, 100, 120, 150],
        dueDays: [5, 10, 15, 20],
        synonyms: ['√°gua', 'agua', 'conta de √°gua', 'conta de agua', 'saneamento']
    },
    'g√°s': {
        category: 'utilities',
        commonAmounts: [40, 60, 80, 100, 120, 150],
        dueDays: [5, 10, 15, 20],
        synonyms: ['g√°s', 'gas', 'conta de g√°s', 'conta de gas', 'g√°s natural']
    },
    'netflix': {
        category: 'entertainment',
        commonAmounts: [25, 30, 40, 50],
        dueDays: [1, 5, 10, 15],
        synonyms: ['netflix', 'netflix streaming']
    },
    'spotify': {
        category: 'entertainment',
        commonAmounts: [17, 20, 25, 30],
        dueDays: [1, 5, 10, 15],
        synonyms: ['spotify', 'spotify premium', 'm√∫sica', 'musica']
    }
};

// üõ°Ô∏è FUN√á√ïES UTILIT√ÅRIAS DE SEGURAN√áA
/**
 * Formata valor monet√°rio de forma segura, evitando erros de null/undefined
 * @param {any} value - Valor a ser formatado
 * @param {number} decimals - N√∫mero de casas decimais (padr√£o: 2)
 * @returns {string} Valor formatado ou '0.00' em caso de erro
 */
function safeFormatCurrency(value, decimals = 2) {
    try {
        if (typeof value === 'number' && !isNaN(value) && isFinite(value)) {
            return value.toFixed(decimals);
        }
        return '0'.padEnd(decimals + 1, '0');
    } catch (error) {
        console.error('Erro ao formatar valor monet√°rio:', error, 'Valor:', value);
        return '0'.padEnd(decimals + 1, '0');
    }
}

/**
 * Valida se um valor √© um n√∫mero v√°lido
 * @param {any} value - Valor a ser validado
 * @returns {boolean} True se for n√∫mero v√°lido
 */
function isValidNumber(value) {
    return typeof value === 'number' && !isNaN(value) && isFinite(value);
}

/**
 * Valida se um objeto tem propriedades obrigat√≥rias
 * @param {object} obj - Objeto a ser validado
 * @param {string[]} requiredProps - Propriedades obrigat√≥rias
 * @returns {boolean} True se todas as propriedades existem
 */
function hasRequiredProperties(obj, requiredProps) {
    if (!obj || typeof obj !== 'object') return false;
    return requiredProps.every(prop => obj.hasOwnProperty(prop) && obj[prop] != null);
}

/**
 * Filtra array removendo itens inv√°lidos
 * @param {Array} array - Array a ser filtrado
 * @param {Function} validator - Fun√ß√£o de valida√ß√£o
 * @returns {Array} Array filtrado
 */
function filterValidItems(array, validator = (item) => item != null) {
    if (!Array.isArray(array)) return [];
    return array.filter(validator);
}

// Fun√ß√£o para calcular similaridade entre palavras (dist√¢ncia de Levenshtein)
function calculateWordSimilarity(word1, word2) {
    const matrix = [];
    
    for (let i = 0; i <= word2.length; i++) {
        matrix[i] = [i];
    }
    
    for (let j = 0; j <= word1.length; j++) {
        matrix[0][j] = j;
    }
    
    for (let i = 1; i <= word2.length; i++) {
        for (let j = 1; j <= word1.length; j++) {
            if (word2.charAt(i - 1) === word1.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1, // substitui√ß√£o
                    matrix[i][j - 1] + 1,      // inser√ß√£o
                    matrix[i - 1][j] + 1       // remo√ß√£o
                );
            }
        }
    }
    
    const maxLength = Math.max(word1.length, word2.length);
    const similarity = 1 - (matrix[word2.length][word1.length] / maxLength);
    return similarity;
}

// Fun√ß√£o para corrigir erros de digita√ß√£o em palavras-chave
function correctTypo(word, correctWords, threshold = 0.7) {
    let bestMatch = null;
    let bestSimilarity = 0;
    
    for (const correctWord of correctWords) {
        const similarity = calculateWordSimilarity(word.toLowerCase(), correctWord.toLowerCase());
        if (similarity > bestSimilarity && similarity >= threshold) {
            bestSimilarity = similarity;
            bestMatch = correctWord;
        }
    }
    
    return bestMatch;
}

// Fun√ß√£o para verificar se uma palavra est√° "perto" de uma palavra correta
function isCloseToCorrect(word, correctWords, threshold = 0.7) {
    return correctTypo(word, correctWords, threshold) !== null;
}

// Sistema de contexto e mem√≥ria inteligente
class ChatContext {
    constructor() {
        this.conversationHistory = [];
        this.userPreferences = {};
        this.lastActions = [];
        this.commonPatterns = {};
        this.confidenceScores = {};
        this.suggestions = [];
        this.maxHistory = 50;
    }

    addMessage(message, response, confidence) {
        this.conversationHistory.push({
            message: message.toLowerCase(),
            response: response,
            confidence: confidence,
            timestamp: Date.now(),
            intent: this.extractIntent(message)
        });

        // Manter apenas as √∫ltimas mensagens
        if (this.conversationHistory.length > this.maxHistory) {
            this.conversationHistory.shift();
        }

        // Aprender padr√µes
        this.learnPatterns(message, response, confidence);
    }

    extractIntent(message) {
        const lowerMsg = message.toLowerCase();
        
        if (lowerMsg.includes('gastei') || lowerMsg.includes('paguei')) return 'expense';
        if (lowerMsg.includes('recebi') || lowerMsg.includes('ganhei')) return 'income';
        if (lowerMsg.includes('transferir') || lowerMsg.includes('transferi')) return 'transfer';
        if (lowerMsg.includes('criar conta') || lowerMsg.includes('nova conta')) return 'create_account';
        if (lowerMsg.includes('saldo') || lowerMsg.includes('quanto tenho')) return 'balance';
        if (lowerMsg.includes('resumo') || lowerMsg.includes('quanto gastei') || lowerMsg.includes('historico') || lowerMsg.includes('relatorio')) return 'summary';
        
        return 'unknown';
    }

    learnPatterns(message, response, confidence) {
        const words = message.toLowerCase().split(/\s+/);
        
        words.forEach(word => {
            if (word.length > 2) { // Ignorar palavras muito curtas
                if (!this.commonPatterns[word]) {
                    this.commonPatterns[word] = { count: 0, success: 0 };
                }
                this.commonPatterns[word].count++;
                if (confidence > 0.7) {
                    this.commonPatterns[word].success++;
                }
            }
        });
    }

    getSuggestions(message, userAccounts) {
        const suggestions = [];
        
        // Apenas sugest√µes essenciais - sem poluir o chat
        if (userAccounts.length === 0) {
            suggestions.push('üè¶ Que tal criar sua primeira conta? Tente: "Criar conta principal"');
        }
        
        return suggestions;
    }

    getConfidence(message, intent) {
        let confidence = 0.5; // Base

        // Aumentar confian√ßa baseado em palavras-chave espec√≠ficas
        const keywords = {
            expense: ['gastei', 'paguei', 'despesa', 'comprei', 'gasto'],
            income: ['recebi', 'ganhei', 'receita', 'sal√°rio', 'freela'],
            transfer: ['transferir', 'transferi', 'mover', 'de', 'para'],
            create_account: ['criar conta', 'nova conta', 'adicionar conta'],
            balance: ['saldo', 'quanto tenho', 'meu saldo'],
            summary: ['resumo', 'quanto gastei', 'quanto recebi', 'historico', 'relatorio', 'resumo melhorado', 'historico detalhado'],
            specific_query: ['quanto gastei', 'quanto recebi', 'quanto ganhei', 'ontem', 'hoje', 'esta semana', 'este m√™s', '√∫ltima semana'],
            fixed_bill: ['aluguel', 'conta', 'fixa', 'mensal', 'todo m√™s', 'mensalmente', 'recorrente']
        };

        const intentKeywords = keywords[intent] || [];
        const messageLower = message.toLowerCase();
        
        intentKeywords.forEach(keyword => {
            if (messageLower.includes(keyword)) {
                confidence += 0.2;
            }
        });

        // Aumentar confian√ßa baseado em padr√µes aprendidos
        const words = messageLower.split(/\s+/);
        words.forEach(word => {
            if (this.commonPatterns[word]) {
                const successRate = this.commonPatterns[word].success / this.commonPatterns[word].count;
                confidence += successRate * 0.1;
            }
        });

        return Math.min(confidence, 1.0);
    }
}

// Inst√¢ncia global do contexto
const chatContext = new ChatContext();

// Sistema de sugest√µes inteligentes baseado em contexto
class SmartSuggestions {
    constructor() {
        this.contextPatterns = {};
        this.userBehavior = {};
        this.commonMistakes = {};
        this.suggestionTemplates = {
            expense: [
                
            ],
            income: [
                
            ],
            transfer: [
                
            ],
            account: [
                
            ]
        };
    }

    generateContextualSuggestions(message, userAccounts, lastIntent) {
        const suggestions = [];
        const lowerMsg = message.toLowerCase();

        // Sugest√µes baseadas no contexto da mensagem


        // Apenas sugest√µes essenciais - sem poluir o chat
        if (userAccounts.length === 0) {
            suggestions.push('üè¶ Que tal criar sua primeira conta? Tente: "Criar conta principal"');
        }

        return suggestions;
    }

    generateProactiveSuggestions(userAccounts, recentTransactions) {
        const suggestions = [];
        
        // Apenas sugest√µes essenciais - sem poluir o chat
        if (userAccounts.length === 0) {
            suggestions.push('üè¶ Que tal criar sua primeira conta? Tente: "Criar conta principal"');
        }
        
        return suggestions;
    }
}

// Inst√¢ncia global das sugest√µes inteligentes
const smartSuggestions = new SmartSuggestions();

// Fun√ß√µes auxiliares para interpretar per√≠odos de tempo
function parseTimePeriod(message) {
    const normalizedMessage = message.toLowerCase();
    console.log('üîç parseTimePeriod chamado com:', normalizedMessage);
    
    // Per√≠odos relativos
    if (normalizedMessage.includes('hoje')) {
        console.log('üîç Encontrou "hoje"');
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);
        return { startDate: startOfDay, endDate: endOfDay, period: 'hoje' };
    }
    
    if (normalizedMessage.includes('ontem')) {
        console.log('üîç Encontrou "ontem"');
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const startOfDay = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
        const endOfDay = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);
        return { startDate: startOfDay, endDate: endOfDay, period: 'ontem' };
    }
    
    if (normalizedMessage.includes('esta semana') || normalizedMessage.includes('semana atual')) {
        const today = new Date();
        const startOfWeek = new Date(today);
        startOfWeek.setDate(today.getDate() - today.getDay()); // Domingo
        startOfWeek.setHours(0, 0, 0, 0);
        const endOfWeek = new Date(startOfWeek);
        endOfWeek.setDate(startOfWeek.getDate() + 6);
        endOfWeek.setHours(23, 59, 59, 999);
        return { startDate: startOfWeek, endDate: endOfWeek, period: 'esta semana' };
    }
    
    if (normalizedMessage.includes('este m√™s') || normalizedMessage.includes('m√™s atual')) {
        const today = new Date();
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59);
        return { startDate: startOfMonth, endDate: endOfMonth, period: 'este m√™s' };
    }
    
    if (normalizedMessage.includes('m√™s passado') || normalizedMessage.includes('√∫ltimo m√™s')) {
        const today = new Date();
        const startOfLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
        const endOfLastMonth = new Date(today.getFullYear(), today.getMonth(), 0, 23, 59, 59);
        return { startDate: startOfLastMonth, endDate: endOfLastMonth, period: 'm√™s passado' };
    }
    
    // Per√≠odos espec√≠ficos por nome do m√™s
    const monthNames = {
        'janeiro': 0, 'fevereiro': 1, 'mar√ßo': 2, 'abril': 3, 'maio': 4, 'junho': 5,
        'julho': 6, 'agosto': 7, 'setembro': 8, 'outubro': 9, 'novembro': 10, 'dezembro': 11
    };
    
    for (const [monthName, monthIndex] of Object.entries(monthNames)) {
        if (normalizedMessage.includes(monthName)) {
            const currentYear = new Date().getFullYear();
            const startOfMonth = new Date(currentYear, monthIndex, 1);
            const endOfMonth = new Date(currentYear, monthIndex + 1, 0, 23, 59, 59);
            return { startDate: startOfMonth, endDate: endOfMonth, period: monthName };
        }
    }
    
    // Per√≠odos espec√≠ficos por n√∫mero do m√™s
    const monthNumberMatch = normalizedMessage.match(/m√™s\s+(\d{1,2})/);
    if (monthNumberMatch) {
        const monthIndex = parseInt(monthNumberMatch[1]) - 1;
        if (monthIndex >= 0 && monthIndex <= 11) {
            const currentYear = new Date().getFullYear();
            const startOfMonth = new Date(currentYear, monthIndex, 1);
            const endOfMonth = new Date(currentYear, monthIndex + 1, 0, 23, 59, 59);
            return { startDate: startOfMonth, endDate: endOfMonth, period: `m√™s ${monthNumberMatch[1]}` };
        }
    }
    
    // Intervalos espec√≠ficos de dias
    const dayRangeMatch = normalizedMessage.match(/do\s+dia\s+(\d{1,2})\s+(?:ao|at√©|at√©\s+o)\s+dia\s+(\d{1,2})/);
    if (dayRangeMatch) {
        const startDay = parseInt(dayRangeMatch[1]);
        const endDay = parseInt(dayRangeMatch[2]);
        
        if (startDay >= 1 && startDay <= 31 && endDay >= 1 && endDay <= 31) {
            // Assumir m√™s atual por padr√£o
            const today = new Date();
            const startDate = new Date(today.getFullYear(), today.getMonth(), startDay);
            const endDate = new Date(today.getFullYear(), today.getMonth(), endDay, 23, 59, 59);
            
            return { 
                startDate: startDate, 
                endDate: endDate, 
                period: `do dia ${startDay} ao dia ${endDay}`,
                needsMonthClarification: true 
            };
        }
    }
    
    // Buscar por padr√µes mais simples
    if (normalizedMessage.includes('quanto gastei') || normalizedMessage.includes('quanto recebi')) {
        // Se n√£o especificou per√≠odo, assumir m√™s atual
        const today = new Date();
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59);
        return { startDate: startOfMonth, endDate: endOfMonth, period: 'este m√™s' };
    }
    
    return null;
}

// Fun√ß√£o para gerar resumo financeiro
async function generateFinancialSummary(transactions, period) {
    if (transactions.length === 0) {
        return `No per√≠odo ${period}, n√£o encontrei nenhuma transa√ß√£o.`;
    }
    
    let totalIncome = 0;
    let totalExpenses = 0;
    const expensesByCategory = {};
    
    transactions.forEach(transaction => {
        if (transaction.type === 'income') {
            totalIncome += transaction.amount || 0;
        } else if (transaction.type === 'expense') {
            totalExpenses += transaction.amount || 0;
            
            // Agrupar despesas por categoria/descri√ß√£o
            const category = transaction.description || 'Sem categoria';
            expensesByCategory[category] = (expensesByCategory[category] || 0) + (transaction.amount || 0);
        }
    });
    
    // Ordenar despesas por valor (maiores primeiro)
    const sortedExpenses = Object.entries(expensesByCategory)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 3); // Top 3 despesas
    
    let summary = `üìä **Resumo do per√≠odo ${period}:**\n\n`;
    summary += `üí∞ **Receitas:** R$ ${totalIncome.toFixed(2)}\n`;
    summary += `üí∏ **Despesas:** R$ ${totalExpenses.toFixed(2)}\n`;
    summary += `üíµ **Saldo:** R$ ${(totalIncome - totalExpenses).toFixed(2)}\n`;
    
    if (sortedExpenses.length > 0) {
        summary += `\nüîç **Principais despesas:**\n`;
        sortedExpenses.forEach(([category, amount]) => {
            summary += `‚Ä¢ ${category}: R$ ${amount.toFixed(2)}\n`;
        });
    }
    
    // Mostrar algumas transa√ß√µes recentes com hor√°rio
    const recentTransactions = transactions
        .sort((a, b) => new Date(b.createdAt?.toDate()) - new Date(a.createdAt?.toDate()))
        .slice(0, 5);
    
    if (recentTransactions.length > 0) {
        summary += `\nüïê **Transa√ß√µes recentes:**\n`;
        recentTransactions.forEach(transaction => {
            const time = transaction.createdAt ? new Date(transaction.createdAt.toDate()).toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            }) : 'hor√°rio n√£o registrado';
            const type = transaction.type === 'income' ? 'üí∞' : 'üí∏';
            summary += `‚Ä¢ ${type} ${transaction.description} - R$ ${transaction.amount.toFixed(2)} (${time})\n`;
        });
    }
    
    return summary;
}

// üöÄ NOVA FUN√á√ÉO: Resumo Financeiro Inteligente com Contas Fixas
async function generateIntelligentFinancialSummary(transactions, fixedBills, accounts, period, startDate, endDate) {
    const today = new Date();
    const currentMonth = today.getMonth();
    const currentYear = today.getFullYear();
    
    // üìä Estat√≠sticas b√°sicas
    let totalIncome = 0;
    let totalExpenses = 0;
    const expensesByCategory = {};
    const accountNamesLower = new Set(
        (accounts || [])
            .filter(acc => acc && acc.name)
            .map(acc => acc.name.toLowerCase())
    );
    
    // üîç Processar transa√ß√µes
    transactions.forEach(transaction => {
        if (transaction.type === 'income') {
            totalIncome += transaction.amount || 0;
        } else if (transaction.type === 'expense') {
            totalExpenses += transaction.amount || 0;
            
            let category = (transaction.description || 'Sem descri√ß√£o').trim();
            if (accountNamesLower.has(category.toLowerCase())) {
                category = 'Sem descri√ß√£o';
            }
            if (!expensesByCategory[category]) {
                expensesByCategory[category] = 0;
            }
            expensesByCategory[category] += (transaction.amount || 0);
        }
    });
    
    // üè† An√°lise das Contas Fixas
    let fixedBillsAnalysis = '';
    let totalFixedBillsAmount = 0;
    let paidFixedBills = 0;
    let unpaidFixedBills = 0;
    let overdueFixedBills = 0;
    let upcomingFixedBills = 0;
    
    if (fixedBills && fixedBills.length > 0) {
        fixedBillsAnalysis = '\nüè† **AN√ÅLISE DAS CONTAS FIXAS:**\n';
        
        // Agrupar contas fixas por status
        const billsByStatus = {
            paid: [],
            unpaid: [],
            overdue: [],
            upcoming: []
        };
        
        fixedBills.forEach(bill => {
            if (!bill.amount || bill.amount <= 0) return;
            
            totalFixedBillsAmount += bill.amount;
            
            // üîç Verificar se foi paga este m√™s
            const billPaidThisMonth = transactions.some(t => 
                t.type === 'expense' && 
                t.description && 
                t.description.toLowerCase().includes(bill.name.toLowerCase()) &&
                t.createdAt && 
                new Date(t.createdAt.toDate()) >= startDate &&
                new Date(t.createdAt.toDate()) <= endDate
            );
            
            // üìÖ Calcular vencimento
            let dueDate = null;
            let daysUntilDue = null;
            let isOverdue = false;
            
            if (bill.dueDay && bill.dueDay > 0) {
                // Criar data de vencimento para este m√™s
                dueDate = new Date(currentYear, currentMonth, bill.dueDay);
                
                // Se j√° passou do vencimento este m√™s, verificar pr√≥ximo m√™s
                if (dueDate < today) {
                    dueDate = new Date(currentYear, currentMonth + 1, bill.dueDay);
                }
                
                daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));
                isOverdue = daysUntilDue < 0;
            }
            
            const billInfo = {
                ...bill,
                dueDate,
                daysUntilDue,
                isOverdue,
                paidThisMonth: billPaidThisMonth
            };
            
            if (billPaidThisMonth) {
                billsByStatus.paid.push(billInfo);
                paidFixedBills++;
            } else if (isOverdue) {
                billsByStatus.overdue.push(billInfo);
                overdueFixedBills++;
            } else if (daysUntilDue <= 7) {
                billsByStatus.upcoming.push(billInfo);
                upcomingFixedBills++;
            } else {
                billsByStatus.unpaid.push(billInfo);
                unpaidFixedBills++;
            }
        });
        
        // üìã Contas Pagas
        if (billsByStatus.paid.length > 0) {
            fixedBillsAnalysis += `\n‚úÖ **CONTAS PAGAS (${billsByStatus.paid.length}):**\n`;
            billsByStatus.paid.forEach(bill => {
                fixedBillsAnalysis += `‚Ä¢ ${bill.name}: R$ ${bill.amount.toFixed(2)} ‚úÖ\n`;
            });
        }
        
        // ‚ö†Ô∏è Contas Vencidas
        if (billsByStatus.overdue.length > 0) {
            fixedBillsAnalysis += `\nüö® **CONTAS VENCIDAS (${billsByStatus.overdue.length}):**\n`;
            billsByStatus.overdue.forEach(bill => {
                const overdueDays = Math.abs(bill.daysUntilDue);
                fixedBillsAnalysis += `‚Ä¢ ${bill.name}: R$ ${bill.amount.toFixed(2)} - Vencida h√° ${overdueDays} dia${overdueDays > 1 ? 's' : ''} ‚ö†Ô∏è\n`;
            });
        }
        
        // üîî Contas Pr√≥ximas do Vencimento
        if (billsByStatus.upcoming.length > 0) {
            fixedBillsAnalysis += `\nüîî **VENCENDO EM BREVE (${billsByStatus.upcoming.length}):**\n`;
            billsByStatus.upcoming.forEach(bill => {
                const urgency = bill.daysUntilDue <= 3 ? 'üö®' : bill.daysUntilDue <= 5 ? '‚ö†Ô∏è' : 'üîî';
                fixedBillsAnalysis += `‚Ä¢ ${bill.name}: R$ ${bill.amount.toFixed(2)} - Vence em ${bill.daysUntilDue} dia${bill.daysUntilDue > 1 ? 's' : ''} ${urgency}\n`;
            });
        }
        
        // üìù Contas Pendentes
        if (billsByStatus.unpaid.length > 0) {
            fixedBillsAnalysis += `\nüìù **CONTAS PENDENTES (${billsByStatus.unpaid.length}):**\n`;
            billsByStatus.unpaid.forEach(bill => {
                if (bill.dueDate) {
                    const daysUntilDue = bill.daysUntilDue;
                    fixedBillsAnalysis += `‚Ä¢ ${bill.name}: R$ ${bill.amount.toFixed(2)} - Vence em ${daysUntilDue} dia${daysUntilDue > 1 ? 's' : ''}\n`;
                } else {
                    fixedBillsAnalysis += `‚Ä¢ ${bill.name}: R$ ${bill.amount.toFixed(2)} - Sem data de vencimento\n`;
                }
            });
        }
        
        // üí∞ Resumo das Contas Fixas
        const totalPaidAmount = billsByStatus.paid.reduce((sum, bill) => sum + bill.amount, 0);
        const totalUnpaidAmount = totalFixedBillsAmount - totalPaidAmount;
        
        fixedBillsAnalysis += `\nüí∞ **RESUMO DAS CONTAS FIXAS:**\n`;
        fixedBillsAnalysis += `‚Ä¢ Total mensal: R$ ${totalFixedBillsAmount.toFixed(2)}\n`;
        fixedBillsAnalysis += `‚Ä¢ J√° pagas: R$ ${totalPaidAmount.toFixed(2)} (${paidFixedBills}/${fixedBills.length})\n`;
        fixedBillsAnalysis += `‚Ä¢ Pendentes: R$ ${totalUnpaidAmount.toFixed(2)} (${unpaidFixedBills + overdueFixedBills + upcomingFixedBills}/${fixedBills.length})\n`;
    }
    
    // üìä Estat√≠sticas por Categoria
    let categoryAnalysis = '';
    if (Object.keys(expensesByCategory).length > 0) {
        const sortedExpenses = Object.entries(expensesByCategory)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 5); // Top 5 despesas
        
        categoryAnalysis = '\nüîç **PRINCIPAIS DESPESAS POR CATEGORIA:**\n';
        sortedExpenses.forEach(([category, amount], index) => {
            const emoji = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '‚Ä¢';
            const percentage = ((amount / totalExpenses) * 100).toFixed(1);
            categoryAnalysis += `${emoji} ${category}: R$ ${amount.toFixed(2)} (${percentage}%)\n`;
        });
    }
    
    // üè¶ Saldo das Contas
    let accountsSummary = '';
    if (accounts && accounts.length > 0) {
        const totalBalance = accounts.reduce((sum, acc) => sum + (acc.balance || 0), 0);
        const accountDetails = accounts
            .filter(acc => acc.balance !== undefined)
            .sort((a, b) => (b.balance || 0) - (a.balance || 0))
            .slice(0, 3); // Top 3 contas
        
        accountsSummary = '\nüè¶ **SALDO DAS CONTAS:**\n';
        accountsSummary += `üí∞ Saldo total: R$ ${totalBalance.toFixed(2)}\n\n`;
        
        if (accountDetails.length > 0) {
            accountsSummary += '**Principais contas:**\n';
            accountDetails.forEach(acc => {
                const balance = acc.balance || 0;
                const emoji = balance >= 0 ? '‚úÖ' : '‚ùå';
                accountsSummary += `${emoji} ${acc.name}: R$ ${balance.toFixed(2)}\n`;
            });
        }
    }
    
    // üìà An√°lise de Tend√™ncias
    let trendAnalysis = '';
    if (transactions.length > 0) {
        const avgDailyExpense = totalExpenses / Math.max(1, Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)));
        const remainingDaysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate() - today.getDate();
        const projectedMonthlyExpenses = totalExpenses + (avgDailyExpense * remainingDaysInMonth);
        
        trendAnalysis = '\nüìà **AN√ÅLISE DE TEND√äNCIAS:**\n';
        trendAnalysis += `‚Ä¢ Gasto m√©dio di√°rio: R$ ${avgDailyExpense.toFixed(2)}\n`;
        trendAnalysis += `‚Ä¢ Proje√ß√£o mensal: R$ ${projectedMonthlyExpenses.toFixed(2)}\n`;
        
        if (totalFixedBillsAmount > 0) {
            const fixedBillsPercentage = ((totalFixedBillsAmount / projectedMonthlyExpenses) * 100).toFixed(1);
            trendAnalysis += `‚Ä¢ Contas fixas representam: ${fixedBillsPercentage}% do gasto projetado\n`;
        }
        
        // üéØ Recomenda√ß√µes
        if (overdueFixedBills > 0) {
            trendAnalysis += `\nüö® **ALERTA:** Voc√™ tem ${overdueFixedBills} conta(s) vencida(s)! Priorize o pagamento.\n`;
        }
        
        if (upcomingFixedBills > 0) {
            trendAnalysis += `\nüîî **ATEN√á√ÉO:** ${upcomingFixedBills} conta(s) vence(m) em breve. Prepare-se!\n`;
        }
        
        if (totalExpenses > totalIncome) {
            trendAnalysis += `\n‚ö†Ô∏è **ATEN√á√ÉO:** Seus gastos est√£o superando suas receitas este m√™s.\n`;
        }
    }
    
    // üé® Montar o resumo final
    let summary = `üìä **RESUMO FINANCEIRO INTELIGENTE - ${period.toUpperCase()}**\n`;
    summary += `üìÖ Per√≠odo: ${startDate.toLocaleDateString('pt-BR')} a ${endDate.toLocaleDateString('pt-BR')}\n\n`;
    
    // Resumo b√°sico
    summary += `üí∞ **RECEITAS:** R$ ${totalIncome.toFixed(2)}\n`;
    summary += `üí∏ **DESPESAS:** R$ ${totalExpenses.toFixed(2)}\n`;
    summary += `üíµ **SALDO DO PER√çODO:** R$ ${(totalIncome - totalExpenses).toFixed(2)}\n`;
    
    // Adicionar an√°lises
    summary += fixedBillsAnalysis;
    summary += categoryAnalysis;
    summary += accountsSummary;
    summary += trendAnalysis;
    
    // üéØ Resumo executivo
    summary += `\nüéØ **RESUMO EXECUTIVO:**\n`;
    if (overdueFixedBills > 0) {
        summary += `üö® Prioridade m√°xima: Pagar ${overdueFixedBills} conta(s) vencida(s)\n`;
    }
    if (upcomingFixedBills > 0) {
        summary += `üîî Prepare-se: ${upcomingFixedBills} conta(s) vence(m) em breve\n`;
    }
    if (totalExpenses > totalIncome) {
        summary += `‚ö†Ô∏è Aten√ß√£o: Controle seus gastos para n√£o ficar no vermelho\n`;
    }
    if (overdueFixedBills === 0 && upcomingFixedBills === 0 && totalExpenses <= totalIncome) {
        summary += `‚úÖ Excelente! Suas finan√ßas est√£o em ordem\n`;
    }
    
    return summary;
}

// Fun√ß√£o principal inteligente para processar mensagens do chat
export async function processChatMessage(message, userAccounts, conversationContext = {}, fixedBills = []) {
    const lowerMessage = message.toLowerCase().trim();
    
    // Adicionar mensagem ao contexto
    chatContext.addMessage(message, null, 0);
    
    // Verificar se √© uma mensagem contextual (per√≠odo apenas)
    if (conversationContext.lastIntent === 'get_summary' && isPeriodOnlyMessage(lowerMessage)) {
        return processContextualSummary(lowerMessage, conversationContext);
    }
    
    // Verificar se √© uma inten√ß√£o de corre√ß√£o
    if (isCorrectLastActionIntent(lowerMessage)) {
        return processCorrectLastActionIntent();
    }
    
    // Sistema inteligente de reconhecimento de inten√ß√µes
    const intentResults = await analyzeIntent(message, userAccounts, fixedBills);
    
    // Evitar erro quando nenhuma inten√ß√£o √© encontrada (ex.: usu√°rio respondeu apenas "nubank")
    if (!intentResults || intentResults.length === 0) {
        return {
            status: 'error',
            response: 'Desculpe, n√£o entendi. Se estamos registrando uma transa√ß√£o, diga a conta (ex.: "Nubank") ou a descri√ß√£o (ex.: "pastel").'
        };
    }
    
    // Selecionar a melhor inten√ß√£o baseada na confian√ßa
    const bestIntent = intentResults.reduce((best, current) => 
        current.confidence > best.confidence ? current : best
    );
    
    // Adicionar sugest√µes inteligentes
    const suggestions = chatContext.getSuggestions(message, userAccounts);
    
    // Processar a inten√ß√£o selecionada
    const result = processIntent(bestIntent, userAccounts);
    
    // Adicionar sugest√µes se a confian√ßa for baixa
    if (bestIntent.confidence < 0.6 && suggestions.length > 0) {
        result.suggestions = suggestions;

    }
    
    // Atualizar contexto com a resposta
    chatContext.addMessage(message, result.response, bestIntent.confidence);
    
    return result;
}

// Fun√ß√£o para processar mensagens com intelig√™ncia avan√ßada
export async function processChatMessageAdvanced(message, userAccounts, conversationContext = {}, recentTransactions = [], fixedBills = []) {
    const lowerMessage = message.toLowerCase().trim();
    
    // Adicionar mensagem ao contexto
    chatContext.addMessage(message, null, 0);
    
    // Verificar se √© uma mensagem contextual (per√≠odo apenas)
    if (conversationContext.lastIntent === 'get_summary' && isPeriodOnlyMessage(lowerMessage)) {
        return processContextualSummary(lowerMessage, conversationContext);
    }
    
    // Verificar se √© uma inten√ß√£o de corre√ß√£o
    if (isCorrectLastActionIntent(lowerMessage)) {
        return processCorrectLastActionIntent();
    }
    
    // Sistema inteligente de reconhecimento de inten√ß√µes
    const intentResults = await analyzeIntent(message, userAccounts, fixedBills);
    
    // Evitar erro quando nenhuma inten√ß√£o √© encontrada (ex.: respostas curtas como "nubank")
    if (!intentResults || intentResults.length === 0) {
        return {
            status: 'error',
            response: 'Desculpe, n√£o entendi. Se estamos registrando uma transa√ß√£o, diga a conta (ex.: "Nubank") ou a descri√ß√£o (ex.: "pastel").'
        };
    }
    
    // Selecionar a melhor inten√ß√£o baseada na confian√ßa
    const bestIntent = intentResults.reduce((best, current) => 
        current.confidence > best.confidence ? current : best
    );
    
    // Gerar sugest√µes inteligentes baseadas no contexto
    const contextualSuggestions = smartSuggestions.generateContextualSuggestions(
        message, 
        userAccounts, 
        conversationContext.lastIntent
    );
    
    // Gerar sugest√µes proativas
    const proactiveSuggestions = smartSuggestions.generateProactiveSuggestions(
        userAccounts, 
        recentTransactions
    );
    
    // Processar a inten√ß√£o selecionada
    const result = processIntent(bestIntent, userAccounts, fixedBills);
    
    // Adicionar sugest√µes contextuais se a confian√ßa for baixa
    if (bestIntent.confidence < 0.6 && contextualSuggestions.length > 0) {
        result.suggestions = contextualSuggestions;

    }
    
    // Adicionar sugest√µes proativas se apropriado
    if (proactiveSuggestions.length > 0 && Math.random() < 0.3) { // 30% de chance
        if (!result.suggestions) result.suggestions = [];
        result.suggestions.push(...proactiveSuggestions);

    }
    
    // Atualizar contexto com a resposta
    chatContext.addMessage(message, result.response, bestIntent.confidence);
    
    return result;
}

// Sistema inteligente de an√°lise de inten√ß√µes
async function analyzeIntent(message, userAccounts, userFixedBills = []) {
    const intents = [];
    const lowerMsg = message.toLowerCase();
    
    // An√°lise de inten√ß√£o de criar conta
    if (isCreateAccountIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'create_account');
        intents.push({
            type: 'create_account',
            confidence: confidence,
            data: { accountName: extractAccountName(lowerMsg) }
        });
    }
    
    // An√°lise de inten√ß√£o de pagamento de conta fixa (DEVE SER VERIFICADO ANTES de despesas gen√©ricas)
    // üîß NOVA L√ìGICA: Verifica√ß√£o ass√≠ncrona para detectar contas fixas registradas
    try {
        if (await isFixedBillPayment(lowerMsg, userFixedBills)) {
            const confidence = 0.85; // Alta confian√ßa para pagamentos de contas fixas
            const paymentInfo = await extractFixedBillPaymentInfo(lowerMsg, userFixedBills);
            intents.push({
                type: 'fixed_bill_payment',
                confidence: confidence,
                data: { ...paymentInfo, originalMessage: message }
            });
        }
    } catch (error) {
        console.error('‚ùå Erro ao verificar pagamento de conta fixa:', error);
    }
    
    // An√°lise de inten√ß√£o de despesa (s√≥ se n√£o for conta fixa)
    if (isAddExpenseIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'expense');
        const expenseDetails = extractExpenseDetails(message);
        intents.push({
            type: 'add_expense',
            confidence: confidence,
            data: { amount: expenseDetails.amount, description: expenseDetails.description, originalMessage: message }
        });
    }
    
    // An√°lise de inten√ß√£o de consulta espec√≠fica de gastos/receitas por per√≠odo (DEVE SER VERIFICADO ANTES de receitas gen√©ricas)
    if (isSpecificQueryIntent(lowerMsg)) {
        console.log('üîç Encontrou inten√ß√£o de consulta espec√≠fica:', lowerMsg);
        const confidence = chatContext.getConfidence(message, 'specific_query');
        const { period, startDate, endDate } = extractPeriodFromMessage(lowerMsg);
        const queryType = lowerMsg.includes('gastei') ? 'expense_query' : 'income_query';
        console.log('üîç Tipo de consulta:', queryType, 'Per√≠odo:', period);
        intents.push({
            type: queryType,
            confidence: confidence,
            data: { period, startDate, endDate }
        });
    }
    
    // An√°lise de inten√ß√£o de receita (s√≥ se n√£o for consulta espec√≠fica)
    if (isAddIncomeIntent(lowerMsg) && !isSpecificQueryIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'income');
        const incomeDetails = extractIncomeDetails(message);
        intents.push({
            type: 'add_income',
            confidence: confidence,
            data: { amount: incomeDetails.amount, description: incomeDetails.description, originalMessage: message }
        });
    }
    
    // An√°lise de inten√ß√£o de transfer√™ncia
    if (isTransferIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'transfer');
        const { amount, fromAccount, toAccount } = extractTransferDetails(lowerMsg, userAccounts);
        intents.push({
            type: 'perform_transfer',
            confidence: confidence,
            data: { amount, fromAccount, toAccount }
        });
    }
    
    // An√°lise de inten√ß√£o de saldo
    if (isShowBalanceIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'balance');
        intents.push({
            type: 'show_balance',
            confidence: confidence,
            data: {}
        });
    }
    

    
    // An√°lise de inten√ß√£o de consulta de pix por pessoa
    if (isPixQueryIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'pix_query');
        const { personName, amount, period } = extractPixQueryDetails(lowerMsg);
        intents.push({
            type: 'pix_query',
            confidence: confidence,
            data: { personName, amount, period }
        });
    }
    
    // An√°lise de inten√ß√£o de resumo
    if (isGetSummaryIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'summary');
        const { period, startDate, endDate } = extractPeriodFromMessage(lowerMsg);
        intents.push({
            type: 'get_summary',
            confidence: confidence,
            data: { period, startDate, endDate }
        });
    }
    
    // An√°lise de inten√ß√£o de ajuda
    if (isShowHelpIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'help');
        intents.push({
            type: 'show_help',
            confidence: confidence,
            data: {}
        });
    }
    
    // An√°lise de inten√ß√£o de conta fixa mensal
    if (isFixedBillIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'fixed_bill');
        const fixedBillDetails = extractFixedBillDetails(lowerMsg);
        intents.push({
            type: 'create_fixed_bill',
            confidence: confidence,
            data: { ...fixedBillDetails, originalMessage: message }
        });
    }
    
    // An√°lise de inten√ß√£o de conta recorrente (pagamento)
    if (isRecurringBillIntent(lowerMsg)) {
        const confidence = chatContext.getConfidence(message, 'recurring_bill');
        intents.push({
            type: 'recurring_bill',
            confidence: confidence,
            data: { originalMessage: message }
        });
    }
    
    // An√°lise de inten√ß√£o de cumprimento (DEVE SER VERIFICADO ANTES das inten√ß√µes gen√©ricas)
    if (isGreetingIntent(message)) {
        const confidence = 0.9; // Alta confian√ßa para cumprimentos
        intents.push({
            type: 'greeting',
            confidence: confidence,
            data: { message: message }
        });
    }
    
    // Se n√£o encontrou nenhuma inten√ß√£o clara, tentar interpretar como despesa gen√©rica
    if (intents.length === 0) {
        console.log('üîç Nenhuma inten√ß√£o encontrada, tentando interpreta√ß√£o gen√©rica');
        if (lowerMsg.includes('gastei') || lowerMsg.includes('paguei') || lowerMsg.includes('despesa')) {
            intents.push({
                type: 'add_expense',
                confidence: 0.3,
                data: { amount: null, description: null }
            });
        } else if (lowerMsg.includes('recebi') || lowerMsg.includes('ganhei') || lowerMsg.includes('receita')) {
            intents.push({
                type: 'add_income',
                confidence: 0.3,
                data: { amount: null, description: null }
            });
        }
    }
    
    console.log('üîç Inten√ß√µes encontradas:', intents);
    return intents;
}

// Processar inten√ß√£o selecionada
function processIntent(intent, userAccounts, fixedBills = []) {
    switch (intent.type) {
        case 'create_account':
            return processCreateAccountIntent(intent.data.accountName, userAccounts);
            
        case 'add_expense':
            return processExpenseIntent(intent.data, userAccounts);
            
        case 'add_income':
            return processIncomeIntent(intent.data, userAccounts);
            
        case 'perform_transfer':
            return processTransferIntent(intent.data, userAccounts);
            
        case 'show_balance':
            return processBalanceIntent(userAccounts);
            
        case 'get_summary':
            return processSummaryIntent(intent.data);
            
        case 'expense_query':
            return processExpenseQueryIntent(intent.data);
            
        case 'income_query':
            return processIncomeQueryIntent(intent.data);
            
        case 'pix_query':
            return processPixQueryIntent(intent.data, userAccounts);
            
        case 'show_help':
            return processHelpIntent();
            
        case 'fixed_bill_payment':
            return processFixedBillPaymentIntent(intent.data, userAccounts, fixedBills);
            
        case 'create_fixed_bill':
            return processFixedBillIntent(intent.data, userAccounts);
            
        case 'recurring_bill':
            return processRecurringBillIntent(intent.data.originalMessage, userAccounts, fixedBills);
            
        case 'greeting':
            return processGreetingIntent(intent.data.message);
            
        default:
            return {
                status: 'error',
                response: 'N√£o consegui entender. Tente algo como:\n‚Ä¢ "Gastei R$50 em almo√ßo"\n‚Ä¢ "Recebi R$1000 de sal√°rio"\n‚Ä¢ "Criar conta Nubank"\n‚Ä¢ "Transferir R$100 do Ita√∫ para o Nubank"\n‚Ä¢ "Qual meu saldo?"\n‚Ä¢ "Corrigir √∫ltima a√ß√£o"'
            };
    }
}

// Fun√ß√µes de processamento de inten√ß√µes
function processCreateAccountIntent(accountName, userAccounts) {
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processCreateAccountIntent:', userAccounts);
        // Se n√£o conseguir validar, permitir cria√ß√£o mas com aviso
        if (accountName) {
            return {
                status: 'clarification',
                response: `‚ö†Ô∏è Aviso: N√£o foi poss√≠vel validar nomes duplicados.\n\nQual ser√° o saldo inicial da conta "${accountName}"?`,
                pendingAction: {
                    type: 'create_account',
                    accountName: accountName
                }
            };
        } else {
            return {
                status: 'clarification',
                response: '‚ö†Ô∏è Aviso: N√£o foi poss√≠vel validar nomes duplicados.\n\nQual ser√° o nome da nova conta?',
                pendingAction: {
                    type: 'create_account',
                    accountName: null
                }
            };
        }
    }
    
    if (accountName) {
        // Validar o nome da conta
        const validation = validateAccountName(accountName, userAccounts);
        if (!validation.isValid) {
            let response = `‚ùå ${validation.error}`;
            if (validation.suggestion) {
                response += `\n\nüí° **Sugest√£o:** ${validation.suggestion}`;
            }
    
            return {
                status: 'error',
                response: response
            };
        }
        
        // Verificar se o nome tem espa√ßos e sugerir usar aspas
        let response = `Qual ser√° o saldo inicial da conta "${accountName}"?`;
        if (accountName.includes(' ') && !accountName.includes('"') && !accountName.includes("'")) {

        }
        
        return {
            status: 'clarification',
            response: response,
            pendingAction: {
                type: 'create_account',
                accountName: accountName
            }
        };
    } else {
        return {
            status: 'clarification',
            response: 'Qual ser√° o nome da nova conta?',
            pendingAction: {
                type: 'create_account',
                accountName: null
            }
        };
    }
}

// Fun√ß√£o para processar pagamento de conta fixa
function processFixedBillPaymentIntent(data, userAccounts, fixedBills = []) {
    console.log('üí∞ Processando pagamento de conta fixa:', data);
    console.log('üîç Contas fixas dispon√≠veis:', fixedBills);
    
    // ‚úÖ VALIDA√á√ÉO DEFENSIVA: Verificar dados de entrada
    if (!data || !data.bill) {
        return {
            status: 'error',
            response: '‚ùå Erro: Dados inv√°lidos para processar pagamento de conta fixa.'
        };
    }
    
    if (!userAccounts || !Array.isArray(userAccounts)) {
        return {
            status: 'error',
            response: '‚ùå Erro: Dados das contas banc√°rias inv√°lidos.'
        };
    }
    
    const bill = data.bill;
    const amount = data.amount;
    const bank = data.bank;
    
    // ‚úÖ VALIDA√á√ÉO: Verificar se bill tem nome
    if (!bill.name) {
        return {
            status: 'error',
            response: '‚ùå Erro: Nome da conta fixa n√£o identificado.'
        };
    }
    
    // üîß CORRE√á√ÉO CR√çTICA: Buscar conta fixa real do banco de dados
    let realBill = null;
    if (fixedBills && Array.isArray(fixedBills) && fixedBills.length > 0) {
        console.log('üîç Buscando conta fixa no banco com nome:', bill.name);
        
        // Buscar por nome exato primeiro
        realBill = fixedBills.find(fb => fb && fb.name && fb.name.toLowerCase() === bill.name.toLowerCase());
        
        // Se n√£o encontrar, buscar por similaridade
        if (!realBill) {
            realBill = fixedBills.find(fb => 
                fb && fb.name && (
                    fb.name.toLowerCase().includes(bill.name.toLowerCase()) || 
                    bill.name.toLowerCase().includes(fb.name.toLowerCase())
                )
            );
        }
        
        // Se ainda n√£o encontrar, buscar por sin√¥nimos
        if (!realBill) {
            for (const fb of fixedBills) {
                if (fb && fb.name && FIXED_BILLS_KNOWLEDGE[fb.name] && FIXED_BILLS_KNOWLEDGE[fb.name].synonyms) {
                    for (const synonym of FIXED_BILLS_KNOWLEDGE[fb.name].synonyms) {
                        if (bill.name.toLowerCase().includes(synonym.toLowerCase()) || 
                            synonym.toLowerCase().includes(bill.name.toLowerCase())) {
                            realBill = fb;
                            console.log('üîç Conta fixa encontrada via sin√¥nimo:', fb.name);
                            break;
                        }
                    }
                    if (realBill) break;
                }
            }
        }
    }
    
    console.log('üîç Conta fixa encontrada no banco:', realBill);
    
    // üîß CORRE√á√ÉO CR√çTICA: Valida√ß√£o defensiva com fallbacks seguros
    let finalAmount = 0;
    
    // ‚úÖ VALIDA√á√ÉO SEGURA: Verificar se realBill.amount √© v√°lido
    if (realBill && isValidNumber(realBill.amount)) {
        finalAmount = realBill.amount;
    } else if (isValidNumber(amount)) {
        finalAmount = amount;
    }
    
    // ‚úÖ VALIDA√á√ÉO: Verificar se o valor √© v√°lido
    if (!finalAmount || finalAmount <= 0) {
        return {
            status: 'error',
            response: `‚ùå Erro: Valor da conta fixa "${bill.name}" n√£o foi definido corretamente.\n\nüí° **Para corrigir:**\n‚Ä¢ Verifique se a conta fixa foi cadastrada com valor correto\n‚Ä¢ Use o painel de contas fixas para definir o valor\n‚Ä¢ Tente: "paguei R$ 100 do aluguel"\n\nüîß **Status atual:**\n‚Ä¢ Conta fixa: ${bill.name}\n‚Ä¢ Valor configurado: ${realBill ? 'Sim' : 'N√£o'}\n‚Ä¢ Valor informado: ${amount ? `R$ ${amount.toFixed(2)}` : 'N√£o informado'}`
        };
    }
    
    // ‚úÖ VALIDA√á√ÉO SEGURA: Filtrar contas v√°lidas
    const validAccounts = filterValidItems(userAccounts, acc => 
        hasRequiredProperties(acc, ['name', 'id', 'balance']) && 
        isValidNumber(acc.balance)
    );
    
    if (validAccounts.length === 0) {
        return {
            status: 'error',
            response: '‚ùå Erro: Nenhuma conta banc√°ria v√°lida encontrada.'
        };
    }
    
    // Verificar se h√° alguma conta com saldo suficiente
    const accountsWithSufficientBalance = validAccounts.filter(acc => acc.balance >= finalAmount);
    
    if (accountsWithSufficientBalance.length === 0) {
            // Nenhuma conta tem saldo suficiente
        return {
            status: 'error',
            response: `‚ùå Nenhuma conta tem saldo suficiente para pagar ${bill.name} (R$ ${safeFormatCurrency(finalAmount)}).\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro a uma das suas contas\n‚Ä¢ Reduza o valor da conta fixa\n‚Ä¢ Use uma transfer√™ncia de outra conta primeiro\n\nüí∞ **Seus saldos atuais:**\n${validAccounts.map(acc => `‚Ä¢ ${acc.name}: R$ ${safeFormatCurrency(acc.balance)}`).join('\n')}`
        };
    }
    
    // H√° saldo suficiente, confirmar pagamento
    let response = `‚úÖ Perfeito! Registrei o pagamento da conta fixa "${bill.name}". `;
    
    if (isValidNumber(amount)) {
        response += `Valor: R$ ${safeFormatCurrency(amount)}. `;
    } else if (realBill && isValidNumber(realBill.amount)) {
        response += `Valor: R$ ${safeFormatCurrency(realBill.amount)}. `;
    } else {
        response += `Valor: R$ ${safeFormatCurrency(finalAmount)}. `;
    }
    
    if (bank && bank.name) {
        response += `Banco usado: ${bank.name}. `;
    } else {
        response += `Qual conta voc√™ usou para pagar? `;
    }
    
    response += `\n\nAgora preciso saber: qual conta voc√™ usou para fazer o pagamento?`;
    
    // üîß CORRE√á√ÉO: Passar dados da conta fixa real para valida√ß√£o
    const finalData = {
        ...data,
        bill: realBill || bill, // Usar conta real se dispon√≠vel
        realAmount: finalAmount
    };
    
    return {
        status: 'success',
        response: response,
        action: 'fixed_bill_payment',
        data: finalData,
        requiresAccountSelection: !bank
    };
}

// Fun√ß√£o para processar inten√ß√£o de conta fixa mensal
function processFixedBillIntent(data, userAccounts) {
    const { name, amount, dueDay, frequency, category, originalMessage } = data;
    
    // Verificar se temos informa√ß√µes suficientes
    if (!name) {
        return {
            status: 'clarification',
            response: 'Qual √© o nome da conta fixa? Por exemplo: "aluguel", "internet", "energia"',
            pendingAction: {
                type: 'create_fixed_bill',
                name: null,
                amount: amount,
                dueDay: dueDay,
                frequency: frequency,
                category: category
            }
        };
    }
    
    if (!amount) {
        return {
            status: 'clarification',
            response: `Qual √© o valor da conta fixa "${name}"?`,
            pendingAction: {
                type: 'create_fixed_bill',
                name: name,
                amount: null,
                dueDay: dueDay,
                frequency: frequency,
                category: category
            }
        };
    }
    
    // Se temos nome e valor, mas n√£o temos dia de vencimento
    if (!dueDay) {
        // Para contas comuns, sugerir dias padr√£o
        let suggestedDay = 10; // Dia padr√£o
        let suggestion = '';
        
        if (['aluguel', 'condom√≠nio'].includes(name.toLowerCase())) {
            suggestedDay = 10;
            suggestion = `üí° Para ${name}, o dia 10 √© comum. `;
        } else if (['energia', '√°gua', 'g√°s'].includes(name.toLowerCase())) {
            suggestedDay = 15;
            suggestion = `üí° Para ${name}, o dia 15 √© comum. `;
        } else if (['internet', 'telefone', 'celular'].includes(name.toLowerCase())) {
            suggestedDay = 20;
            suggestion = `üí° Para ${name}, o dia 20 √© comum. `;
        }
        
        return {
            status: 'clarification',
            response: `${suggestion}Em que dia do m√™s vence a conta "${name}" de R$ ${amount.toFixed(2)}?`,
            pendingAction: {
                type: 'create_fixed_bill',
                name: name,
                amount: amount,
                dueDay: null,
                frequency: frequency,
                category: category
            }
        };
    }
    
    // Se temos todas as informa√ß√µes, criar a conta fixa
    const fixedBillData = {
        name: name,
        amount: amount,
        dueDay: dueDay,
        frequency: frequency,
        category: category,
        isActive: true,
        createdAt: new Date(),
        lastProcessed: null
    };
    
    return {
        status: 'success',
        action: 'create_fixed_bill',
        data: fixedBillData,
        response: `‚úÖ Conta fixa mensal criada com sucesso!\n\nüìã **${name}**\nüí∞ Valor: R$ ${amount.toFixed(2)}\nüìÖ Vencimento: Dia ${dueDay} de cada m√™s\nüè∑Ô∏è Categoria: ${getCategoryDisplayName(category)}\n\nüí° Esta conta ser√° processada automaticamente todo m√™s no dia ${dueDay}.`
    };
}

// Fun√ß√£o auxiliar para obter nome de exibi√ß√£o da categoria
function getCategoryDisplayName(category) {
    const categoryNames = {
        'housing': 'Moradia',
        'utilities': 'Servi√ßos',
        'entertainment': 'Entretenimento',
        'subscriptions': 'Assinaturas',
        'transport': 'Transporte',
        'health': 'Sa√∫de',
        'education': 'Educa√ß√£o',
        'food': 'Alimenta√ß√£o',
        'other': 'Outros'
    };
    
    return categoryNames[category] || category;
}

function processExpenseIntent(data, userAccounts) {
    const { amount, description, dateInfo } = data;
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processExpenseIntent:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    if (amount && description) {
        // Tentar identificar a conta automaticamente usando a nova fun√ß√£o inteligente
        const accountResult = identifyAccountForTransaction(data.originalMessage || '', userAccounts, 'expense');
        
        if (accountResult.status === 'success') {
            // Verificar se √© uma data passada e precisa de hor√°rio
            if (dateInfo && (dateInfo.type === 'yesterday' || dateInfo.type === 'past_date')) {
                return {
                    status: 'clarification',
                    response: `Voc√™ informou que fez o pagamento ${dateInfo.message}. Qual foi o hor√°rio? üí° Formato: "18:00", "18 horas", "18", "18,00"`,
                    pendingAction: {
                        type: 'add_expense_with_time',
                        amount: amount,
                        description: description,
                        accountId: accountResult.accountId,
                        dateInfo: dateInfo
                    }
                };
            }
            
            const pendingAction = {
                type: 'add_expense',
                amount: amount,
                description: description,
                accountId: accountResult.accountId,
                dateInfo: dateInfo
            };
            
            // Verificar se precisa de confirma√ß√£o
            if (amount > CONFIRMATION_LIMIT) {
                const accountName = userAccounts.find(acc => acc.id === accountResult.accountId)?.name || 'conta';
                return {
                    status: 'confirmation',
                    response: `Confirma a despesa de R$ ${amount.toFixed(2)} em "${description}" na conta ${accountName}?`,
                    pendingAction: pendingAction
                };
            }
            
            return {
                status: 'success',
                action: 'add_transaction',
                data: {
                    type: 'expense',
                    amount: amount,
                    description: description,
                    accountId: accountResult.accountId,
                    timestamp: dateInfo ? dateInfo.date : new Date() // Usar data informada ou atual
                },
                response: `‚úÖ Despesa registrada: ${description} - R$ ${amount.toFixed(2)} na conta ${userAccounts.find(acc => acc.id === accountResult.accountId)?.name || 'principal'}`
            };
        } else if (accountResult.status === 'clarification') {
            // Se precisa de esclarecimento sobre a conta
            return {
                status: 'clarification',
                response: accountResult.message || `Em qual conta voc√™ gastou R$ ${amount.toFixed(2)}?`,
                options: accountResult.options,
                pendingAction: {
                    type: 'add_expense',
                    amount: amount,
                    description: description,
                    accountId: null
                }
            };
        } else {
            // Erro na identifica√ß√£o da conta
            return {
                status: 'error',
                response: accountResult.message || 'Erro ao identificar a conta. Tente novamente.'
            };
        }
    } else if (amount) {
        return {
            status: 'clarification',
            response: `Com o que voc√™ gastou R$ ${amount.toFixed(2)}?`,
            pendingAction: {
                type: 'add_expense',
                amount: amount,
                description: null,
                accountId: null
            }
        };
    } else {
        return {
            status: 'clarification',
            response: 'Quanto voc√™ gastou? Por exemplo: "Gastei R$25 em almo√ßo"',
            pendingAction: {
                type: 'add_expense',
                amount: null,
                description: null,
                accountId: null
            }
        };
    }
}

function processIncomeIntent(data, userAccounts) {
    const { amount, description, dateInfo } = data;
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processIncomeIntent:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    if (amount && description) {
        // Tentar identificar a conta automaticamente usando a nova fun√ß√£o inteligente
        const accountResult = identifyAccountForTransaction(data.originalMessage || '', userAccounts, 'income');
        
        if (accountResult.status === 'success') {
            // Verificar se √© uma data passada e precisa de hor√°rio
            if (dateInfo && (dateInfo.type === 'yesterday' || dateInfo.type === 'past_date')) {
                return {
                    status: 'clarification',
                    response: `Voc√™ informou que recebeu ${dateInfo.message}. Qual foi o hor√°rio? üí° Formato: "18:00", "18 horas", "18", "18,00"`,
                    pendingAction: {
                        type: 'add_income_with_time',
                        amount: amount,
                        description: description,
                        accountId: accountResult.accountId,
                        dateInfo: dateInfo
                    }
                };
            }
            
            const pendingAction = {
                type: 'add_income',
                amount: amount,
                description: description,
                accountId: accountResult.accountId,
                dateInfo: dateInfo
            };
            
            // Verificar se precisa de confirma√ß√£o
            if (amount > CONFIRMATION_LIMIT) {
                const accountName = userAccounts.find(acc => acc.id === accountResult.accountId)?.name || 'conta';
                return {
                    status: 'confirmation',
                    response: `Confirma a receita de R$ ${amount.toFixed(2)} em "${description}" na conta ${accountName}?`,
                    pendingAction: pendingAction
                };
            }
            
            return {
                status: 'success',
                action: 'add_transaction',
                data: {
                    type: 'income',
                    amount: amount,
                    description: description,
                    accountId: accountResult.accountId,
                    timestamp: dateInfo ? dateInfo.date : new Date() // Usar data informada ou atual
                },
                response: `‚úÖ Receita registrada: ${description} - R$ ${amount.toFixed(2)} na conta ${userAccounts.find(acc => acc.id === accountResult.accountId)?.name || 'principal'}`
            };
        } else if (accountResult.status === 'clarification') {
            // Se precisa de esclarecimento sobre a conta
            return {
                status: 'clarification',
                response: accountResult.message || `Em qual conta voc√™ recebeu R$ ${amount.toFixed(2)}?`,
                options: accountResult.options,
                pendingAction: {
                    type: 'add_income',
                    amount: amount,
                    description: description,
                    accountId: null
                }
            };
        } else {
            // Erro na identifica√ß√£o da conta
            return {
                status: 'error',
                response: accountResult.message || 'Erro ao identificar a conta. Tente novamente.'
            };
        }
    } else if (amount) {
        // Se s√≥ tem o valor, perguntar pela descri√ß√£o primeiro
        return {
            status: 'clarification',
            response: `De onde voc√™ recebeu R$ ${amount.toFixed(2)}?`,
            pendingAction: {
                type: 'add_income',
                amount: amount,
                description: null,
                accountId: null
            }
        };
    } else {
        return {
            status: 'clarification',
            response: 'Quanto voc√™ recebeu? Por exemplo: "Recebi R$1000 de sal√°rio"',
            pendingAction: {
                type: 'add_income',
                amount: null,
                description: null,
                accountId: null
            }
        };
    }
}

function processPixQueryIntent(data, userAccounts) {
    const { personName, amount, period } = data;
    
    if (!personName) {
        return {
            status: 'error',
            response: 'N√£o consegui identificar para quem voc√™ enviou o pix. Tente ser mais espec√≠fico.'
        };
    }
    
    // Aqui voc√™ implementaria a l√≥gica para buscar no banco de dados
    // Por enquanto, vou retornar uma resposta simulada
    let response = `üîç Consultando pix enviados para ${personName}`;
    
    if (amount) {
        response += ` no valor de R$ ${amount.toFixed(2)}`;
    }
    
    if (period === 'today') {
        response += ' hoje';
    } else if (period === 'yesterday') {
        response += ' ontem';
    } else if (period === 'week') {
        response += ' nesta semana';
    } else if (period === 'month') {
        response += ' neste m√™s';
    }
    
    response += '...\n\n';
    
    // Simular resultado (aqui voc√™ implementaria a busca real)
    if (amount) {
        response += `‚úÖ Encontrei 1 pix de R$ ${amount.toFixed(2)} para ${personName} hoje √†s 14:30`;
    } else {
        response += `‚úÖ Encontrei 3 pix para ${personName}:\n`;
        response += `‚Ä¢ R$ 50,00 hoje √†s 10:15\n`;
        response += `‚Ä¢ R$ 25,00 ontem √†s 16:45\n`;
        response += `‚Ä¢ R$ 100,00 na semana passada`;
    }
    
    return {
        status: 'success',
        response: response
    };
}

function processTransferIntent(data, userAccounts) {
    const { amount, fromAccount, toAccount, dateInfo } = data;
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processTransferIntent:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    if (amount && fromAccount && toAccount) {
        // Verificar se √© uma data passada e precisa de hor√°rio
        if (dateInfo && (dateInfo.type === 'yesterday' || dateInfo.type === 'past_date')) {
            return {
                status: 'clarification',
                response: `Voc√™ informou que fez a transfer√™ncia ${dateInfo.message}. Qual foi o hor√°rio? üí° Formato: "18:00", "18 horas", "18", "18,00"`,
                pendingAction: {
                    type: 'perform_transfer_with_time',
                    amount: amount,
                    fromAccountId: fromAccount.id,
                    toAccountId: toAccount.id,
                    dateInfo: dateInfo
                }
            };
        }
        
        const pendingAction = {
            type: 'perform_transfer',
            amount: amount,
            fromAccountId: fromAccount.id,
            toAccountId: toAccount.id,
            dateInfo: dateInfo
        };
        
        // Verificar se precisa de confirma√ß√£o
        if (amount > CONFIRMATION_LIMIT) {
            return {
                status: 'confirmation',
                response: `Confirma a transfer√™ncia de R$ ${amount.toFixed(2)} de ${fromAccount.name} para ${toAccount.name}?`,
                pendingAction: pendingAction
            };
        }
        
        return {
            status: 'success',
            action: 'perform_transfer',
            data: {
                fromAccountId: fromAccount.id,
                toAccountId: toAccount.id,
                amount: amount,
                timestamp: dateInfo ? dateInfo.date : new Date() // Usar data informada ou atual
            },
            response: `‚úÖ Transfer√™ncia realizada: R$ ${amount.toFixed(2)} de ${fromAccount.name} para ${toAccount.name}`
        };
    } else {
        return {
            status: 'clarification',
            response: 'De qual conta para qual conta voc√™ quer transferir? Por exemplo: "Transferir R$100 do Ita√∫ para o Nubank"',
            pendingAction: {
                type: 'perform_transfer',
                amount: amount || null,
                fromAccountId: null,
                toAccountId: null
            }
        };
    }
}

function processBalanceIntent(userAccounts) {
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processBalanceIntent:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    if (userAccounts.length === 0) {
        return {
            status: 'success',
            action: 'show_balance',
            response: 'Voc√™ ainda n√£o tem contas cadastradas. Crie uma conta primeiro!'
        };
    }
    
    let response = 'üí∞ Seu saldo total √© R$ ' + userAccounts.reduce((total, acc) => total + (acc && acc.balance ? acc.balance : 0), 0).toFixed(2) + '\n\n';
    userAccounts.forEach(account => {
        if (account && account.name && account.balance !== undefined) {
            response += `${account.name}: R$ ${account.balance.toFixed(2)}\n`;
        }
    });
    
    return {
        status: 'success',
        action: 'show_balance',
        response: response
    };
}

function processSummaryIntent(data) {
    const { period, startDate, endDate } = data;
    
    if (period && startDate && endDate) {
        return {
            status: 'success',
            action: 'get_summary',
            data: {
                period: period,
                startDate: startDate,
                endDate: endDate,
                useIntelligentSummary: true // üöÄ NOVO: Usar resumo inteligente
            },
            response: '' // N√£o exibir mensagem redundante
        };
    } else {
        // Se n√£o especificou per√≠odo, assumir m√™s atual por padr√£o
        const today = new Date();
        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59);
        
        return {
            status: 'success',
            action: 'get_summary',
            data: {
                period: 'este m√™s',
                startDate: startOfMonth,
                endDate: endOfMonth,
                useIntelligentSummary: true // üöÄ NOVO: Usar resumo inteligente
            },
            response: '' // N√£o exibir mensagem redundante
        };
    }
}

function processExpenseQueryIntent(data) {
    const { period, startDate, endDate } = data;
    
    return {
        status: 'success',
        action: 'get_expense_query',
        data: {
            period: period,
            startDate: startDate,
            endDate: endDate
        },
        response: '' // N√£o exibir mensagem redundante
    };
}

function processIncomeQueryIntent(data) {
    const { period, startDate, endDate } = data;
    
    return {
        status: 'success',
        action: 'get_income_query',
        data: {
            period: period,
            startDate: startDate,
            endDate: endDate
        },
        response: '' // N√£o exibir mensagem redundante
    };
}

function processGreetingIntent(message) {
    const lowerMsg = message.toLowerCase().trim();
    
    // Respostas personalizadas baseadas no tipo de cumprimento
    let response = '';
    
    if (lowerMsg.includes('bom dia')) {
        response = 'Bom dia! ‚òÄÔ∏è Como posso ajudar com suas finan√ßas hoje?';
    } else if (lowerMsg.includes('boa tarde')) {
        response = 'Boa tarde! üå§Ô∏è Como posso ajudar com suas finan√ßas hoje?';
    } else if (lowerMsg.includes('boa noite')) {
        response = 'Boa noite! üåô Como posso ajudar com suas finan√ßas hoje?';
    } else if (lowerMsg.includes('oi') || lowerMsg.includes('ol√°') || lowerMsg.includes('ola') || lowerMsg.includes('ei') || lowerMsg.includes('hey') || lowerMsg.includes('hello') || lowerMsg.includes('hi')) {
        response = 'Ol√°! üëã Como posso ajudar com suas finan√ßas hoje?';
    } else {
        response = 'Ol√°! üëã Como posso ajudar com suas finan√ßas hoje?';
    }
    
    return {
        status: 'success',
        action: 'greeting',
        response: response
    };
}

function processHelpIntent() {
    return {
        status: 'success',
        action: 'show_help',
        response: `ü§ñ **Como usar o Dinah:**

üí∞ **Consultas:**
‚Ä¢ "Qual meu saldo?" - Ver saldo de todas as contas
‚Ä¢ "Quanto tenho?" - Saldo total
‚Ä¢ "Quanto gastei este m√™s?" - Resumo mensal
‚Ä¢ "Quanto gastei ontem?" - Gastos de ontem
‚Ä¢ "Quanto recebi ontem?" - Receitas de ontem

üí∏ **Registrar despesas:**
‚Ä¢ "Gastei R$50 em almo√ßo"
‚Ä¢ "Paguei R$200 de conta"

üíµ **Registrar receitas:**
‚Ä¢ "Recebi R$1000 de sal√°rio"
‚Ä¢ "Ganhei R$500 de freela"

üè¶ **Contas:**
‚Ä¢ "Criar conta Nubank" - Nova conta
‚Ä¢ "Transferir R$100 do Ita√∫ para o Nubank"

üîÑ **Corre√ß√µes:**
‚Ä¢ "Corrigir √∫ltima a√ß√£o" - Corrigir erro
‚Ä¢ "Desfazer" - Cancelar transa√ß√£o

`
    };
}

// Fun√ß√µes auxiliares para reconhecimento de inten√ß√µes
function isCreateAccountIntent(message) {
    // Palavras-chave corretas para criar conta
    const correctCreateAccountWords = [
        'criar', 'nova', 'adicionar', 'adiciona', 'cria', 'novo', 'adicionando',
        'criando', 'adicionou', 'criou'
    ];
    
    // Frases-chave corretas para criar conta
    const correctCreateAccountPhrases = [
        'criar conta', 'nova conta', 'adicionar conta', 'criar uma conta',
        'nova conta bancaria', 'adicionar uma conta', 'criar conta nova'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave
    for (const word of words) {
        if (isCloseToCorrect(word, correctCreateAccountWords, 0.6)) {
            const correctedWord = correctTypo(word, correctCreateAccountWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            // Se encontrou uma palavra-chave, verificar se tamb√©m tem "conta" na mensagem
            if (message.toLowerCase().includes('conta')) {
                return true;
            }
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('criar conta') || message.includes('nova conta') || message.includes('adicionar conta');
}

// Fun√ß√£o para verificar se uma mensagem √© sobre conta fixa mensal
function isFixedBillIntent(message) {
    const lowerMsg = message.toLowerCase();
    
    // Palavras-chave espec√≠ficas para contas fixas
    const fixedBillKeywords = [
        'aluguel', 'conta', 'fixa', 'mensal', 'todo m√™s', 'mensalmente', 'recorrente',
        'condom√≠nio', 'internet', 'energia', '√°gua', 'g√°s', 'telefone', 'celular',
        'assinatura', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'youtube'
    ];
    
    // Verificar se cont√©m palavras-chave de conta fixa
    for (const keyword of fixedBillKeywords) {
        if (lowerMsg.includes(keyword)) {
            return true;
        }
    }
    
    // Verificar se cont√©m padr√µes de valor + frequ√™ncia
    const valuePattern = /\d+[.,]?\d*\s*(reais?|r\$|real)/i;
    const frequencyPattern = /(todo m√™s|mensalmente|dia \d+|todo dia \d+)/i;
    
    if (valuePattern.test(lowerMsg) && frequencyPattern.test(lowerMsg)) {
        return true;
    }
    
    // Verificar se cont√©m apenas o nome de uma conta fixa comum
    const commonFixedBills = ['aluguel', 'condom√≠nio', 'internet', 'energia', '√°gua'];
    for (const bill of commonFixedBills) {
        if (lowerMsg.trim() === bill) {
            return true;
        }
    }
    
    return false;
}

// Fun√ß√£o para verificar se uma mensagem √© um cumprimento
function isGreetingIntent(message) {
    const greetingWords = [
        'oi', 'ol√°', 'ola', 'ei', 'hey', 'hello', 'hi', 'bom dia', 'boa tarde', 'boa noite',
        'oi!', 'ol√°!', 'ola!', 'ei!', 'hey!', 'hello!', 'hi!', 'bom dia!', 'boa tarde!', 'boa noite!'
    ];
    
    const lowerMsg = message.toLowerCase().trim();
    
    // Verificar se √© apenas um cumprimento (sem outras palavras)
    for (const greeting of greetingWords) {
        if (lowerMsg === greeting || lowerMsg === greeting.replace('!', '')) {
            return true;
        }
    }
    
    // Verificar se come√ßa com cumprimento mas tem outras palavras
    for (const greeting of greetingWords) {
        if (lowerMsg.startsWith(greeting + ' ') || lowerMsg.startsWith(greeting.replace('!', '') + ' ')) {
            return true;
        }
    }
    
    return false;
}

function isAddExpenseIntent(message) {
    // PRIMEIRO: Verificar se √© uma transfer√™ncia entre contas pr√≥prias
    if (isTransferBetweenOwnAccounts(message)) {
        console.log('üîç Detectado como transfer√™ncia entre contas pr√≥prias, n√£o como despesa');
        return false;
    }
    
    // Palavras-chave corretas para despesa
    const correctExpenseWords = [
        'gastei', 'paguei', 'despesa', 'comprei', 'gasto', 'gastando', 'pagando',
        'despesas', 'gastos', 'compras', 'pago', 'gastou', 'pagou', 'pix', 'fiz pix',
        'enviei pix', 'enviando pix', 'enviado pix', 'mandar pix', 'mandei pix',
        'mandando pix', 'paguei pix', 'pix de', 'pix para'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de despesa
    for (const word of words) {
        if (isCloseToCorrect(word, correctExpenseWords, 0.6)) {
            const correctedWord = correctTypo(word, correctExpenseWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            return true;
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('gastei') || message.includes('paguei') || message.includes('despesa') || 
           message.includes('comprei') || message.includes('gasto');
}

// Nova fun√ß√£o para detectar transfer√™ncias entre contas pr√≥prias
function isTransferBetweenOwnAccounts(message) {
    const lowerMsg = message.toLowerCase();
    
    // Palavras que indicam transfer√™ncia/movimenta√ß√£o entre contas
    const transferKeywords = [
        'mandei', 'mandando', 'mandar', 'enviando', 'enviado', 'enviei', 'transfiri', 'transferindo',
        'transferir', 'movi', 'movendo', 'mover', 'passei', 'passando', 'passar', 'de', 'para', 'pra'
    ];
    
    // Verificar se cont√©m palavras de transfer√™ncia
    let hasTransferKeyword = false;
    for (const keyword of transferKeywords) {
        if (lowerMsg.includes(keyword)) {
            hasTransferKeyword = true;
            break;
        }
    }
    
    if (!hasTransferKeyword) {
        return false;
    }
    
    // Verificar se cont√©m padr√µes de dire√ß√£o (de X para Y)
    const directionPatterns = [
        /(?:de|da|do)\s+.+?\s+(?:para|pra)/i,  // "de nubank para nubank empresarial"
        /(?:para|pra)\s+.+?\s+(?:de|da|do)/i,  // "para nubank empresarial de nubank"
        /(?:mandei|enviei|transfiri|movi)\s+.+?\s+(?:de|da|do)\s+.+?\s+(?:para|pra)/i, // "mandei 100 de nubank para nubank empresarial"
        /(?:mandei|enviei|transfiri|movi)\s+.+?\s+(?:para|pra)\s+.+?\s+(?:de|da|do)/i  // "mandei 100 para nubank empresarial de nubank"
    ];
    
    for (const pattern of directionPatterns) {
        if (pattern.test(lowerMsg)) {
            console.log('üîç Padr√£o de dire√ß√£o encontrado, √© transfer√™ncia entre contas');
            return true;
        }
    }
    
    // Verificar se cont√©m valor monet√°rio + palavras de transfer√™ncia
    const hasAmount = /\d+[.,]?\d*/.test(lowerMsg);
    if (hasAmount && hasTransferKeyword) {
        // Verificar se n√£o √© um gasto real (ex: "mandei 100 reais para pagar conta")
        const expenseIndicators = ['pagar', 'conta', 'boleto', 'fatura', 'compra', 'almo√ßo', 'uber', 'ifood'];
        for (const indicator of expenseIndicators) {
            if (lowerMsg.includes(indicator)) {
                console.log('üîç Cont√©m indicador de gasto real, n√£o √© transfer√™ncia');
                return false;
            }
        }
        
        console.log('üîç Cont√©m valor + palavra de transfer√™ncia, provavelmente √© transfer√™ncia entre contas');
        return true;
    }
    
    return false;
}

function isAddIncomeIntent(message) {
    // Palavras-chave corretas para receita
    const correctIncomeWords = [
        'recebi', 'ganhei', 'receita', 'sal√°rio', 'freela', 'recebendo', 'ganhando',
        'receitas', 'ganhos', 'salarios', 'freelas', 'recebeu', 'ganhou'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de receita
    for (const word of words) {
        if (isCloseToCorrect(word, correctIncomeWords, 0.6)) {
            const correctedWord = correctTypo(word, correctIncomeWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            return true;
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('recebi') || message.includes('ganhei') || message.includes('receita') || 
           message.includes('sal√°rio') || message.includes('freela');
}

function isTransferIntent(message) {
    // PRIMEIRO: Verificar se √© uma transfer√™ncia entre contas pr√≥prias usando a fun√ß√£o melhorada
    if (isTransferBetweenOwnAccounts(message)) {
        console.log('üîç Detectado como transfer√™ncia entre contas pr√≥prias');
        return true;
    }
    
    // Palavras-chave corretas para transfer√™ncia
    const correctTransferWords = [
        'transferir', 'transferi', 'mover', 'movi', 'transfira', 'transfere',
        'transfer√™ncia', 'transferencia', 'transferindo', 'transferido'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de transfer√™ncia
    let hasTransferKeyword = false;
    let correctedWord = null;
    
    for (const word of words) {
        if (isCloseToCorrect(word, correctTransferWords, 0.6)) {
            hasTransferKeyword = true;
            correctedWord = correctTypo(word, correctTransferWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            break;
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com padr√µes regex (m√©todo original)
    if (!hasTransferKeyword) {
        const transferPatterns = [
            /transferir/i,
            /transferi/i,
            /mover/i,
            /movi/i,
            /transfira/i,
            /transfere/i
        ];
        hasTransferKeyword = transferPatterns.some(pattern => pattern.test(message));
    }
    
    // Verificar se cont√©m o padr√£o "de X para Y" (incluindo "da", "do")
    const hasDeParaPattern = /(?:de|da|do)\s+.+?\s+(?:para|pra)/i.test(message);
    
    // Verificar se cont√©m valor monet√°rio
    const hasAmount = /\d+[.,]?\d*/.test(message);
    
    // Para ser uma transfer√™ncia, deve ter pelo menos uma palavra-chave E o padr√£o de dire√ß√£o
    return hasTransferKeyword && hasDeParaPattern && hasAmount;
}

function isPixQueryIntent(message) {
    const lowerMsg = message.toLowerCase();
    
    // Verificar se √© uma consulta sobre pix
    const hasPixKeyword = lowerMsg.includes('pix') || lowerMsg.includes('enviei') || lowerMsg.includes('enviado');
    
    // Verificar se cont√©m palavras de consulta
    const hasQueryKeywords = lowerMsg.includes('?') || 
                           lowerMsg.includes('quanto') || 
                           lowerMsg.includes('quando') || 
                           lowerMsg.includes('hoje') || 
                           lowerMsg.includes('ontem') ||
                           lowerMsg.includes('enviei') ||
                           lowerMsg.includes('enviado');
    
    // Verificar se menciona uma pessoa (para, pra, com)
    const hasPersonMention = /(?:para|pra|com)\s+[a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+/i.test(message);
    
    return hasPixKeyword && hasQueryKeywords && hasPersonMention;
}

function isShowBalanceIntent(message) {
    // Palavras-chave corretas para saldo
    const correctBalanceWords = [
        'saldo', 'quanto', 'tenho', 'meu', 'minha', 'qual', 'quanto tenho',
        'meu saldo', 'minha conta', 'quanto eu tenho', 'saldo da conta'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de saldo
    for (const word of words) {
        if (isCloseToCorrect(word, correctBalanceWords, 0.6)) {
            const correctedWord = correctTypo(word, correctBalanceWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            // Se encontrou uma palavra-chave, verificar se n√£o √© consulta de total
            if (!message.toLowerCase().includes('total')) {
                return true;
            }
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('qual meu saldo') || message.includes('quanto tenho') || message.includes('meu saldo') ||
           message.includes('saldo') && !message.includes('total');
}

function isShowTotalBalanceIntent(message) {
    return message.includes('quanto tenho') || message.includes('saldo total') || message.includes('total');
}

function isGetSummaryIntent(message) {
    // Palavras-chave corretas para resumo
    const correctSummaryWords = [
        'resumo', 'resumir', 'resumindo', 'resumiu', 'resumido', 'resumos',
        'relat√≥rio', 'relatorio', 'relat√≥rios', 'relatorios', 'balan√ßo', 'balanco',
        'historico', 'hist√≥rico', 'relatorio completo', 'resumo melhorado', 'historico detalhado'
    ];
    
    // Per√≠odos corretos
    const correctPeriodWords = [
        'este m√™s', 'este mes', '√∫ltima semana', 'ultima semana', 'm√™s passado', 'mes passado',
        'janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 'julho', 'agosto',
        'setembro', 'outubro', 'novembro', 'dezembro'
    ];
    
    // Remover palavras-chave que conflitam com consultas espec√≠ficas
    if (message.includes('quanto gastei') || message.includes('quanto recebi') || message.includes('quanto ganhei')) {
        return false;
    }
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de resumo
    for (const word of words) {
        if (isCloseToCorrect(word, correctSummaryWords, 0.6)) {
            const correctedWord = correctTypo(word, correctSummaryWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            return true;
        }
    }
    
    // Verificar se alguma palavra est√° pr√≥xima de um per√≠odo
    for (const word of words) {
        if (isCloseToCorrect(word, correctPeriodWords, 0.6)) {
            const correctedWord = correctTypo(word, correctPeriodWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            return true;
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('resumo') || message.includes('historico') || message.includes('hist√≥rico') || 
           message.includes('relatorio') || message.includes('relat√≥rio') || message.includes('este m√™s') || 
           message.includes('√∫ltima semana') || message.includes('janeiro') || message.includes('fevereiro') || 
           message.includes('mar√ßo') || message.includes('abril') || message.includes('maio') || 
           message.includes('junho') || message.includes('julho') || message.includes('agosto') || 
           message.includes('setembro') || message.includes('outubro') || message.includes('novembro') || 
           message.includes('dezembro');
}

function isSpecificQueryIntent(message) {
    const lowerMsg = message.toLowerCase();
    
    // Palavras-chave corretas para consultas espec√≠ficas
    const correctQueryWords = [
        'quanto', 'quanto gastei', 'quanto recebi', 'quanto ganhei', 'quanto eu gastei',
        'quanto eu recebi', 'quanto eu ganhei', 'quanto foi', 'quanto custou', 'quantos', 'quantas'
    ];
    
    // Per√≠odos corretos
    const correctPeriodWords = [
        'ontem', 'hoje', 'esta semana', 'este m√™s', 'este mes', '√∫ltima semana', 'ultima semana',
        'semana passada', 'm√™s passado', 'mes passado', 'm√™s anterior', 'mes anterior'
    ];
    
    // Verificar se √© uma pergunta (cont√©m ?) ou usa palavras de consulta
    const isQuestion = lowerMsg.includes('?') || 
                      lowerMsg.includes('quanto') || 
                      lowerMsg.includes('quantos') || 
                      lowerMsg.includes('quantas') ||
                      lowerMsg.includes('quando') ||
                      lowerMsg.includes('como');
    
    // Verificar se cont√©m palavras de consulta espec√≠ficas
    const hasSpecificQuery = lowerMsg.includes('quanto gastei') || 
                            lowerMsg.includes('quanto recebi') || 
                            lowerMsg.includes('quanto ganhei') ||
                            lowerMsg.includes('quantos gastei') ||
                            lowerMsg.includes('quantos recebi') ||
                            lowerMsg.includes('quantos ganhei');
    
    // Verificar se cont√©m per√≠odo
    const hasPeriod = correctPeriodWords.some(period => lowerMsg.includes(period));
    
    // üîß CORRE√á√ÉO: Verificar se √© uma declara√ß√£o de gasto (n√£o uma consulta)
    // Se a mensagem cont√©m um valor monet√°rio e "gastei", √© uma declara√ß√£o, n√£o uma consulta
    const hasMonetaryValue = /\d+[.,]?\d*/.test(lowerMsg);
    const hasGastei = lowerMsg.includes('gastei') || lowerMsg.includes('paguei') || lowerMsg.includes('comprei');
    
    // Se tem valor monet√°rio + verbo de gasto, √© uma declara√ß√£o, n√£o uma consulta
    if (hasMonetaryValue && hasGastei) {
        console.log('üîç isSpecificQueryIntent: Detectado como declara√ß√£o de gasto, n√£o como consulta:', message);
        return false;
    }
    
    // Dividir a mensagem em palavras para verifica√ß√£o com toler√¢ncia
    const words = lowerMsg.split(/\s+/);
    
    let hasQueryWithTolerance = false;
    let hasPeriodWithTolerance = false;
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de consulta
    for (const word of words) {
        if (isCloseToCorrect(word, correctQueryWords, 0.6)) {
            const correctedWord = correctTypo(word, correctQueryWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            hasQueryWithTolerance = true;
            break;
        }
    }
    
    // Verificar se alguma palavra est√° pr√≥xima de um per√≠odo
    for (const word of words) {
        if (isCloseToCorrect(word, correctPeriodWords, 0.6)) {
            const correctedWord = correctTypo(word, correctPeriodWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            hasPeriodWithTolerance = true;
            break;
        }
    }
    
    // Resultado final: deve ter consulta espec√≠fica OU (pergunta + per√≠odo)
    const hasQuery = hasSpecificQuery || hasQueryWithTolerance;
    const hasPeriodFinal = hasPeriod || hasPeriodWithTolerance;
    
    // Se tem consulta espec√≠fica, n√£o precisa de per√≠odo
    if (hasSpecificQuery) {
        console.log('üîç isSpecificQueryIntent: Consulta espec√≠fica detectada:', message);
        return true;
    }
    
    // Se √© uma pergunta e tem per√≠odo, √© uma consulta
    if (isQuestion && hasPeriodFinal) {
        console.log('üîç isSpecificQueryIntent: Pergunta com per√≠odo detectada:', message);
        return true;
    }
    
    console.log('üîç isSpecificQueryIntent:', message, 'isQuestion:', isQuestion, 'hasSpecificQuery:', hasSpecificQuery, 'hasPeriod:', hasPeriodFinal);
    
    return false;
}

function isShowHelpIntent(message) {
    // Palavras-chave corretas para ajuda
    const correctHelpWords = [
        'ajuda', 'help', 'como usar', 'o que posso fazer', 'comandos', 'ajudar',
        'ajudando', 'ajudou', 'ajudar-me', 'ajudar me', 'como funciona', 'tutorial'
    ];
    
    // Dividir a mensagem em palavras
    const words = message.toLowerCase().split(/\s+/);
    
    // Verificar se alguma palavra est√° pr√≥xima de uma palavra-chave de ajuda
    for (const word of words) {
        if (isCloseToCorrect(word, correctHelpWords, 0.6)) {
            const correctedWord = correctTypo(word, correctHelpWords, 0.6);
            console.log(`üîç Palavra com erro de digita√ß√£o detectada: "${word}" -> "${correctedWord}"`);
            return true;
        }
    }
    
    // Se n√£o encontrou com toler√¢ncia, verificar com m√©todo original
    return message.includes('ajuda') || message.includes('help') || message.includes('como usar') || 
           message.includes('o que posso fazer') || message.includes('comandos');
}

function isRecurringBillIntent(message) {
    const recurringKeywords = [
        'aluguel', 'aluguel vence', 'conta de luz', 'conta de √°gua', 'netflix', 'spotify',
        'despesa recorrente', 'conta fixa', 'conta mensal', 'pagamento recorrente',
        'cadastrar conta', 'adicionar conta', 'minha conta de'
    ];
    return recurringKeywords.some(keyword => message.includes(keyword));
}

function isSummaryIntent(message) {
    const summaryKeywords = [
        'resumo', 'quanto gastei', 'quanto recebi', 'extrato', 'relat√≥rio', 'relatorio', 'movimenta√ß√µes',
        'gastos', 'receitas', 'despesas', 'balan√ßo', 'balanco', 'resumo financeiro', 'resumo do m√™s',
        'resumo da semana', 'resumo de hoje', 'resumo de', 'quanto eu gastei', 'quanto eu recebi',
        'historico', 'hist√≥rico', 'relatorio completo', 'resumo melhorado', 'historico detalhado'
    ];
    return summaryKeywords.some(keyword => message.includes(keyword));
}

function isCorrectLastActionIntent(message) {
    const correctKeywords = ['corrigir', 'errei', 'desfazer', 'foi na outra conta', 'corrige', 'desfaz'];
    return correctKeywords.some(keyword => message.includes(keyword));
}

function isPeriodOnlyMessage(message) {
    const periodKeywords = ['hoje', 'esta semana', 'este m√™s', 'm√™s passado', 'janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
    const hasPeriod = periodKeywords.some(keyword => message.includes(keyword));
    const hasOtherKeywords = ['quanto', 'gastei', 'recebi', 'resumo', 'extrato', 'relat√≥rio', 'relatorio', 'historico', 'hist√≥rico'].some(keyword => message.includes(keyword));
    
    return hasPeriod && !hasOtherKeywords;
}

// Fun√ß√µes para processar cada tipo de inten√ß√£o









function processRecurringBillIntent(message, userAccounts, fixedBills = []) {
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processRecurringBillIntent:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    // Verificar se √© para marcar como pago
    if (message.includes('paguei') || message.includes('paguei o') || message.includes('paguei a')) {
        return processMarkBillAsPaid(message, userAccounts, fixedBills);
    }
    
    // Verificar se √© para cadastrar ou atualizar
    const amountMatch = message.match(/(\d+([.,]\d{1,2})?)/);
    if (!amountMatch) {
        return {
            status: 'clarification',
            response: "Qual o valor da conta recorrente? Por exemplo: 'Meu aluguel de R$2000 vence todo dia 10'"
        };
    }
    
    const amount = parseFloat(amountMatch[1].replace(',', '.'));
    
    // Extrair nome da conta recorrente
    const billName = extractBillName(message);
    if (!billName) {
        return {
            status: 'clarification',
            response: "Qual √© o nome da conta recorrente? Por exemplo: 'Meu aluguel de R$2000 vence todo dia 10'"
        };
    }
    
    // Extrair data de vencimento
    const dueDate = extractDueDate(message);
    if (!dueDate) {
        return {
            status: 'clarification',
            response: `Em que dia do m√™s vence ${billName}? Por exemplo: 'Meu aluguel de R$2000 vence todo dia 10'`
        };
    }
    
    return {
        status: 'success',
        action: 'add_recurring_bill',
        data: {
            name: billName,
            amount: amount,
            dueDate: dueDate
        },
        response: `‚úÖ Conta recorrente "${billName}" cadastrada: R$ ${amount.toFixed(2)} todo dia ${dueDate}`
    };
}

function processMarkBillAsPaid(message, userAccounts, fixedBills = []) {
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processMarkBillAsPaid:', userAccounts);
        return {
            status: 'error',
            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
        };
    }
    
    // Extrair nome da conta recorrente
    const billName = extractBillName(message);
    if (!billName) {
        return {
            status: 'clarification',
            response: "Qual conta recorrente voc√™ pagou? Por exemplo: 'Paguei o aluguel' ou 'Paguei a conta de luz'"
        };
    }
    
    // Extrair banco se mencionado na mensagem
    const mentionedBank = extractBankFromMessage(message);
    
    // Buscar contas fixas que correspondem ao nome mencionado
    const matchingBills = findMatchingFixedBills(billName, fixedBills);
    
    if (matchingBills.length === 0) {
        return {
            status: 'error',
            response: `N√£o encontrei nenhuma conta fixa chamada "${billName}". Verifique se ela est√° cadastrada no sistema.`
        };
    }
    
    // Se h√° m√∫ltiplas contas fixas com nomes similares, mostrar op√ß√µes
    if (matchingBills.length > 1) {
        return {
            status: 'clarification',
            response: `Encontrei ${matchingBills.length} contas fixas similares a "${billName}". Qual delas voc√™ pagou?`,
            options: matchingBills.map(bill => ({ 
                name: `${bill.name} - R$ ${bill.amount.toFixed(2)} (Dia ${bill.dueDay})`, 
                id: bill.id,
                billData: bill
            })),
            pendingAction: {
                type: 'select_fixed_bill_for_payment',
                billName: billName,
                mentionedBank: mentionedBank
            }
        };
    }
    
    // Se h√° apenas uma conta fixa e um banco foi mencionado, processar diretamente
    if (matchingBills.length === 1 && mentionedBank) {
        const bill = matchingBills[0];
        const bankAccount = findBankAccount(mentionedBank, userAccounts);
        
        if (bankAccount) {
            return {
                status: 'success',
                action: 'mark_bill_as_paid',
                data: {
                    billId: bill.id,
                    billName: bill.name,
                    amount: bill.amount,
                    accountId: bankAccount.id,
                    bankName: bankAccount.name
                },
                response: `‚úÖ Pagamento de ${bill.name} (R$ ${bill.amount.toFixed(2)}) registrado automaticamente na conta ${bankAccount.name}!`
            };
        }
    }
    
    // Caso padr√£o: verificar se h√° alguma conta com saldo suficiente
    const bill = matchingBills[0];
    
    // Verificar se h√° alguma conta com saldo suficiente
    const accountsWithSufficientBalance = userAccounts.filter(acc => acc && acc.name && acc.id && (acc.balance || 0) >= bill.amount);
    
    if (accountsWithSufficientBalance.length === 0) {
        // Nenhuma conta tem saldo suficiente
        return {
            status: 'error',
            response: `‚ùå Nenhuma conta tem saldo suficiente para pagar ${bill.name} (R$ ${bill.amount.toFixed(2)}).\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro a uma das suas contas\n‚Ä¢ Reduza o valor da conta fixa\n‚Ä¢ Use uma transfer√™ncia de outra conta primeiro\n\nüí∞ **Seus saldos atuais:**\n${userAccounts.filter(acc => acc && acc.name && acc.id).map(acc => `‚Ä¢ ${acc.name}: R$ ${(acc.balance || 0).toFixed(2)}`).join('\n')}`
        };
    }
    
    // H√° contas com saldo suficiente, perguntar qual usar
    return {
        status: 'clarification',
        response: `√ìtimo! De qual conta voc√™ usou o dinheiro para pagar ${bill.name} (R$ ${bill.amount.toFixed(2)})?`,
        options: accountsWithSufficientBalance.map(acc => ({ 
            name: `${acc.name} - Saldo: R$ ${(acc.balance || 0).toFixed(2)} ‚úÖ`, 
            id: acc.id 
        })),
        pendingAction: {
            type: 'mark_bill_as_paid',
            billId: bill.id,
            billName: bill.name,
            amount: bill.amount,
            mentionedBank: mentionedBank
        }
    };
}







function processCorrectLastActionIntent() {
    return {
        status: 'clarification',
        response: "O que voc√™ gostaria de corrigir na √∫ltima transa√ß√£o?",
        options: [
            { name: "O Valor", id: "value" },
            { name: "A Conta", id: "account" },
            { name: "A Descri√ß√£o", id: "description" },
            { name: "Cancelar Transa√ß√£o", id: "cancel" }
        ],
        pendingAction: {
            type: 'correct_last_action'
        }
    };
}

function processContextualSummary(message, conversationContext) {
    const { period, startDate, endDate } = extractPeriodFromMessage(message);
    
    if (period && startDate && endDate) {
        return {
            status: 'success',
            action: 'get_summary',
            data: {
                period: period,
                startDate: startDate,
                endDate: endDate
            },
            response: '' // N√£o exibir mensagem redundante
        };
    }
    
    return {
        status: 'error',
        response: 'N√£o consegui entender o per√≠odo. Tente algo como "este m√™s" ou "janeiro".'
    };
}

// Fun√ß√µes auxiliares para extra√ß√£o de entidades

function extractDescription(message, ...prepositions) {
    for (const prep of prepositions) {
        const index = message.indexOf(prep);
        if (index !== -1) {
            const description = message.substring(index + prep.length).trim();
            // Remover palavras desnecess√°rias no final
            const cleanDescription = description.replace(/\b(da conta|no|na|com|para|de|do|da)\b/g, '').trim();
            return cleanDescription || null;
        }
    }
    return null;
}

function extractAccount(message, userAccounts) {
    console.log('üîç extractAccount chamado com:', message);
    console.log('üîç Contas dispon√≠veis:', userAccounts.map(acc => acc?.name));
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em extractAccount:', userAccounts);
        return { status: 'error', message: 'Erro interno: contas n√£o dispon√≠veis' };
    }
    
    if (userAccounts.length === 0) {
        return { status: 'error', message: 'Nenhuma conta encontrada' };
    }
    
    const lowerMessage = message.toLowerCase();
    console.log('üîç Mensagem em min√∫sculas:', lowerMessage);
    const foundAccounts = [];
    
    // Primeira passada: busca exata
    console.log('üîç üîç Primeira passada: busca exata');
    for (const account of userAccounts) {
        if (account && account.name) {
            const accountNameLower = account.name.toLowerCase();
            console.log(`üîç Verificando conta: "${account.name}" (${accountNameLower})`);
            
            // Busca exata
            if (lowerMessage.includes(accountNameLower)) {
                console.log(`‚úÖ Conta encontrada por busca exata: "${account.name}"`);
                foundAccounts.push({ account, matchType: 'exact', score: 1.0 });
            }
        }
    }
    
    // Segunda passada: busca por similaridade se n√£o encontrou exato
    if (foundAccounts.length === 0) {
        console.log('üîç üîç Segunda passada: busca por similaridade');
        for (const account of userAccounts) {
            if (account && account.name) {
                const accountNameLower = account.name.toLowerCase();
                const words = accountNameLower.split(/\s+/);
                console.log(`üîç Verificando palavras da conta "${account.name}":`, words);
                
                // Verificar se alguma palavra da conta est√° na mensagem
                let score = 0;
                let matchedWords = 0;
                
                for (const word of words) {
                    if (word.length > 2 && lowerMessage.includes(word)) {
                        score += 0.3;
                        matchedWords++;
                        console.log(`‚úÖ Palavra "${word}" encontrada na mensagem`);
                    }
                }
                
                // Se encontrou pelo menos uma palavra significativa
                if (matchedWords > 0 && score > 0.2) {
                    console.log(`‚úÖ Conta encontrada por similaridade: "${account.name}" (score: ${score})`);
                    foundAccounts.push({ account, matchType: 'partial', score: score });
                }
            }
        }
    }
    
    // Terceira passada: busca por abrevia√ß√µes comuns
    if (foundAccounts.length === 0) {
        console.log('üîç üîç Terceira passada: busca por abrevia√ß√µes');
        const commonAbbreviations = {
            'nubank': ['nu', 'nub'],
            'itau': ['itau', 'it'],
            'bradesco': ['brad', 'br'],
            'santander': ['sant', 'san'],
            'bb': ['banco do brasil', 'brasil'],
            'caixa': ['cef', 'cef']
        };
        
        for (const [fullName, abbreviations] of Object.entries(commonAbbreviations)) {
            for (const abbr of abbreviations) {
                if (lowerMessage.includes(abbr)) {
                    console.log(`üîç Abrevia√ß√£o "${abbr}" encontrada, buscando por "${fullName}"`);
                    const matchingAccount = userAccounts.find(acc => 
                        acc && acc.name && acc.name.toLowerCase().includes(fullName)
                    );
                    if (matchingAccount) {
                        console.log(`‚úÖ Conta encontrada por abrevia√ß√£o: "${matchingAccount.name}"`);
                        foundAccounts.push({ account: matchingAccount, matchType: 'abbreviation', score: 0.8 });
                        break;
                    }
                }
            }
        }
    }
    
    console.log('üîç Total de contas encontradas:', foundAccounts.length);
    if (foundAccounts.length > 0) {
        foundAccounts.forEach((fa, index) => {
            console.log(`üîç ${index + 1}. "${fa.account.name}" (${fa.matchType}, score: ${fa.score})`);
        });
    }
    
    if (foundAccounts.length === 0) {
        console.log('‚ùå Nenhuma conta encontrada');
        return { status: 'not_found' };
    }
    
    // Ordenar por score (maior primeiro) e por especificidade (nomes mais longos primeiro)
    foundAccounts.sort((a, b) => {
        // Primeiro por score
        if (b.score !== a.score) {
            return b.score - a.score;
        }
        // Se score igual, priorizar nomes mais espec√≠ficos (mais longos)
        return b.account.name.length - a.account.name.length;
    });
    
    // IMPORTANTE: Se h√° conflito entre contas com scores iguais, 
    // verificar se uma √© substring da outra e priorizar a mais espec√≠fica
    if (foundAccounts.length > 1 && foundAccounts[0].score === foundAccounts[1].score) {
        const firstAccount = foundAccounts[0].account.name.toLowerCase();
        const secondAccount = foundAccounts[1].account.name.toLowerCase();
        
        // Se uma conta √© substring da outra, priorizar a mais longa (mais espec√≠fica)
        if (firstAccount.includes(secondAccount) || secondAccount.includes(firstAccount)) {
            console.log(`üîç Conflito detectado entre contas similares: "${foundAccounts[0].account.name}" e "${foundAccounts[1].account.name}"`);
            console.log(`üîç Priorizando a mais espec√≠fica: "${foundAccounts[0].account.name}"`);
        }
    }
    
    console.log('üîç Contas ordenadas por score e especificidade:');
    foundAccounts.forEach((fa, index) => {
        console.log(`üîç ${index + 1}. "${fa.account.name}" (${fa.matchType}, score: ${fa.score}, length: ${fa.account.name.length})`);
    });
    
    // Se s√≥ encontrou uma conta, retornar ela
    if (foundAccounts.length === 1) {
        console.log(`‚úÖ Retornando √∫nica conta encontrada: "${foundAccounts[0].account.name}"`);
        return {
            status: 'success',
            accountId: foundAccounts[0].account.id
        };
    }
    
    // M√∫ltiplas contas encontradas - verificar se h√° uma com score muito maior
    const bestScore = foundAccounts[0].score;
    const closeScores = foundAccounts.filter(fa => fa.score >= bestScore * 0.8);
    console.log(`üîç Melhor score: ${bestScore}, contas com score pr√≥ximo: ${closeScores.length}`);
    
    if (closeScores.length === 1) {
        // S√≥ uma conta com score alto, usar ela
        console.log(`‚úÖ Retornando conta com melhor score: "${closeScores[0].account.name}"`);
        return {
            status: 'success',
            accountId: closeScores[0].account.id
        };
    }
    
    // IMPORTANTE: Se h√° conflito entre contas similares (uma substring da outra),
    // priorizar a mais espec√≠fica (mais longa) automaticamente
    if (closeScores.length > 1) {
        const firstAccount = closeScores[0].account.name.toLowerCase();
        const secondAccount = closeScores[1].account.name.toLowerCase();
        
        // Se uma conta √© substring da outra, usar a mais espec√≠fica automaticamente
        if (firstAccount.includes(secondAccount) || secondAccount.includes(firstAccount)) {
            console.log(`üîç Conflito entre contas similares resolvido automaticamente`);
            console.log(`‚úÖ Retornando conta mais espec√≠fica: "${closeScores[0].account.name}"`);
            return {
                status: 'success',
                accountId: closeScores[0].account.id
            };
        }
    }
    
    // M√∫ltiplas contas com scores similares e n√£o relacionadas - precisa de esclarecimento
    console.log(`üîç M√∫ltiplas contas com scores similares e n√£o relacionadas, solicitando esclarecimento`);
    const clarificationAccounts = closeScores.map(fa => ({ 
        name: fa.account.name, 
        id: fa.account.id,
        matchType: fa.matchType,
        score: fa.score
    }));
    
    return {
        status: 'clarification',
        options: clarificationAccounts,
        message: `Encontrei m√∫ltiplas contas similares. Qual voc√™ quer usar?`
    };
}

// Identifica√ß√£o inteligente de conta em transa√ß√µes (despesa/receita)
function identifyAccountForTransaction(message, userAccounts, transactionType = 'expense') {
    // Valida√ß√µes b√°sicas
    if (!userAccounts || !Array.isArray(userAccounts)) {
        return { status: 'error', message: 'Erro interno: contas n√£o dispon√≠veis' };
    }
    if (userAccounts.length === 0) {
        return { status: 'error', message: 'Nenhuma conta encontrada' };
    }
    // Se s√≥ existir uma conta, usar automaticamente
    if (userAccounts.length === 1) {
        return { status: 'success', accountId: userAccounts[0].id };
    }

    const originalMessage = (message || '').toLowerCase();

    // Padr√µes espec√≠ficos de refer√™ncia a contas
    const accountPatterns = [
        // "na/no/da/do conta/banco <nome>"
        /(?:na|no|da|do)\s+(?:conta\s+|banco\s+)?([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß_\-\s]+?)(?:\s|$)/i,
        // "com o cart√£o <nome>", "pelo/pela <nome>"
        /(?:com\s+o\s+cart√£o|com\s+o|com\s+a|pelo|pela)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß_\-\s]+?)(?:\s|$)/i
    ];

    // 1) Tentar extrair o trecho do nome e mapear para uma conta existente
    for (const pattern of accountPatterns) {
        const match = originalMessage.match(pattern);
        if (match && match[1]) {
            const candidate = match[1].trim();
            const accountResult = extractAccount(candidate, userAccounts);
            if (accountResult.status === 'success') {
                return accountResult;
            }
        }
    }

    // 2) Fallback: procurar diretamente qualquer nome de conta presente na mensagem completa
    const directAccountResult = extractAccount(originalMessage, userAccounts);
    if (directAccountResult.status === 'success') {
        return directAccountResult;
    }
    if (directAccountResult.status === 'clarification') {
        return directAccountResult;
    }

    // 3) Sem pistas suficientes -> pedir esclarecimento
    return {
        status: 'clarification',
        message: `Em qual conta voc√™ ${transactionType === 'income' ? 'recebeu' : 'gastou'}?`,
        options: userAccounts.filter(acc => acc && acc.id && acc.name).map(acc => ({ name: acc.name, id: acc.id }))
    };
}

function extractAccountName(message) {
    // Padr√µes para extrair nome da conta, incluindo nomes com espa√ßos
    const patterns = [
        // Padr√£o com aspas duplas: "criar conta "Nubank Empresarial""
        /criar conta ["']([^"']+)["']/i,
        /nova conta ["']([^"']+)["']/i,
        /adicionar conta ["']([^"']+)["']/i,
        
        // Padr√£o sem aspas: "criar conta Nubank Empresarial"
        /criar conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s|$)/i,
        /nova conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s|$)/i,
        /adicionar conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s|$)/i,
        
        // Padr√£o com underscore: "criar conta Nubank_Empresarial"
        /criar conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß_\s]+?)(?:\s|$)/i,
        /nova conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß_\s]+?)(?:\s|$)/i,
        /adicionar conta\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß_\s]+?)(?:\s|$)/i
    ];
    
    for (const pattern of patterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            let accountName = match[1].trim();
            
            // Limpar o nome da conta
            accountName = accountName.replace(/\s+/g, ' '); // Normalizar espa√ßos
            accountName = accountName.replace(/^\s+|\s+$/g, ''); // Remover espa√ßos no in√≠cio/fim
            
            // Se o nome tem espa√ßos mas n√£o est√° entre aspas, sugerir usar aspas
            if (accountName.includes(' ') && !message.includes('"') && !message.includes("'")) {
                console.log(`üîç Nome de conta com espa√ßos detectado: "${accountName}"`);
                console.log(`üí° Sugest√£o: Use aspas para nomes com espa√ßos: "criar conta "${accountName}""`);
            }
            
            // Validar se o nome n√£o est√° vazio
            if (accountName.length > 0) {
                return accountName;
            }
        }
    }
    
    // Se n√£o encontrou com os padr√µes principais, tentar extrair o que vem ap√≥s "conta"
    const contaMatch = message.match(/(?:criar|nova|adicionar)\s+conta\s+(.+)/i);
    if (contaMatch && contaMatch[1]) {
        let accountName = contaMatch[1].trim();
        
        // Remover palavras desnecess√°rias no final
        accountName = accountName.replace(/\s+(?:com|saldo|inicial|de|para|no|na|em|sobre|referente\s+a).*$/i, '');
        accountName = accountName.replace(/\s+$/g, ''); // Remover espa√ßos no final
        
        if (accountName.length > 0) {
            console.log(`üîç Nome de conta extra√≠do alternativamente: "${accountName}"`);
            return accountName;
        }
    }
    
    return null;
}

function extractSourceAccount(message, userAccounts) {
    console.log('üîç extractSourceAccount chamado com:', message);
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em extractSourceAccount:', userAccounts);
        return { status: 'error', message: 'Erro interno: contas n√£o dispon√≠veis' };
    }
    
    // Buscar por preposi√ß√µes que indicam origem
    const sourcePrepositions = ['de', 'da', 'do', 'desde'];
    let sourceAccountName = null;
    
    for (const prep of sourcePrepositions) {
        const index = message.indexOf(prep);
        if (index !== -1) {
            console.log('üîç Preposi√ß√£o de origem encontrada:', prep, 'em posi√ß√£o:', index);
            
            // Procurar por nomes de contas ap√≥s a preposi√ß√£o
            let textAfterPrep = message.substring(index + prep.length).trim();
            console.log('üîç Texto ap√≥s preposi√ß√£o (antes da limpeza):', textAfterPrep);
            
            // IMPORTANTE: Parar quando encontrar palavras que indicam destino
            const destinationKeywords = ['para', 'pra', 'em', 'no', 'na'];
            for (const destKeyword of destinationKeywords) {
                const destIndex = textAfterPrep.toLowerCase().indexOf(destKeyword);
                if (destIndex !== -1) {
                    console.log('üîç Palavra de destino encontrada:', destKeyword, 'em posi√ß√£o:', destIndex);
                    textAfterPrep = textAfterPrep.substring(0, destIndex).trim();
                    console.log('üîç Texto ap√≥s limpeza (removendo destino):', textAfterPrep);
                    break;
                }
            }
            
            // Usar a fun√ß√£o extractAccount melhorada para encontrar a conta
            const accountResult = extractAccount(textAfterPrep, userAccounts);
            console.log('üîç Resultado da busca por conta:', accountResult);
            
            if (accountResult.status === 'success') {
                return accountResult;
            } else if (accountResult.status === 'clarification') {
                return accountResult;
            }
        }
    }
    
    // Se n√£o encontrou com preposi√ß√µes, tentar buscar por contexto
    // Procurar por padr√µes como "transferir X do Y" ou "gastei X da conta Y"
    const contextPatterns = [
        /(?:transferir|transferi|mover|movi|transfira|transfere)\s+(?:r?\$?\s*\d+[.,]?\d*)\s+(?:de|da|do)\s+(.+?)(?:\s+(?:para|pra|em|no|na)|$)/i,
        /(?:gastei|paguei|comprei)\s+(?:r?\$?\s*\d+[.,]?\d*)\s+(?:da|do|na|no)\s+(.+?)(?:\s|$)/i
    ];
    
    for (const pattern of contextPatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            console.log('üîç Padr√£o de contexto encontrado:', match[0]);
            const accountText = match[1].trim();
            console.log('üîç Texto da conta extra√≠do:', accountText);
            
            const accountResult = extractAccount(accountText, userAccounts);
            console.log('üîç Resultado da busca por conta no contexto:', accountResult);
            
            if (accountResult.status === 'success') {
                return accountResult;
            } else if (accountResult.status === 'clarification') {
                return accountResult;
            }
        }
    }
    
    console.log('üîç Nenhuma conta de origem encontrada');
    return { status: 'not_found' };
}

function extractDestinationAccount(message, userAccounts, excludeAccountId) {
    console.log('üîç extractDestinationAccount chamado com:', message, 'excluindo:', excludeAccountId);
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em extractDestinationAccount:', userAccounts);
        return { status: 'error', message: 'Erro interno: contas n√£o dispon√≠veis' };
    }
    
    // Buscar por preposi√ß√µes que indicam destino
    const destPrepositions = ['para', 'pra', 'em', 'no', 'na'];
    
    for (const prep of destPrepositions) {
        const index = message.indexOf(prep);
        if (index !== -1) {
            console.log('üîç Preposi√ß√£o de destino encontrada:', prep, 'em posi√ß√£o:', index);
            
            // Procurar por nomes de contas ap√≥s a preposi√ß√£o
            let textAfterPrep = message.substring(index + prep.length).trim();
            console.log('üîç Texto ap√≥s preposi√ß√£o de destino (antes da limpeza):', textAfterPrep);
            
            // Parar quando encontrar palavras que n√£o s√£o relevantes para o nome da conta
            const stopKeywords = ['conta', 'banco', 'cart√£o', 'de', 'da', 'do', 'com', 'para', 'pra'];
            for (const stopKeyword of stopKeywords) {
                const stopIndex = textAfterPrep.toLowerCase().indexOf(stopKeyword);
                if (stopIndex !== -1 && stopIndex > 0) { // S√≥ parar se n√£o for no in√≠cio
                    console.log('üîç Palavra de parada encontrada:', stopKeyword, 'em posi√ß√£o:', stopIndex);
                    textAfterPrep = textAfterPrep.substring(0, stopIndex).trim();
                    console.log('üîç Texto ap√≥s limpeza (removendo palavras irrelevantes):', textAfterPrep);
                    break;
                }
            }
            
            // Filtrar contas excluindo a conta de origem
            const availableAccounts = userAccounts.filter(acc => 
                acc && acc.id && acc.id !== excludeAccountId
            );
            console.log('üîç Contas dispon√≠veis para destino:', availableAccounts.map(acc => acc.name));
            
            // Usar a fun√ß√£o extractAccount melhorada para encontrar a conta
            const accountResult = extractAccount(textAfterPrep, availableAccounts);
            console.log('üîç Resultado da busca por conta de destino:', accountResult);
            
            if (accountResult.status === 'success') {
                return accountResult;
            } else if (accountResult.status === 'clarification') {
                return accountResult;
            }
        }
    }
    
    // Se n√£o encontrou com preposi√ß√µes, tentar buscar por contexto
    // Procurar por padr√µes como "transferir X para Y" ou "mover X para Y"
    const contextPatterns = [
        /(?:transferir|transferi|mover|movi|transfira|transfere)\s+(?:r?\$?\s*\d+[.,]?\d*)\s+(?:de|da|do)\s+.+?\s+(?:para|pra|em|no|na)\s+(.+?)(?:\s|$)/i,
        /(?:para|pra|em|no|na)\s+(.+?)(?:\s+(?:conta|banco|cart√£o)|$)/i
    ];
    
    for (const pattern of contextPatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            const accountText = match[1].trim();
            
            // Filtrar contas excluindo a conta de origem
            const availableAccounts = userAccounts.filter(acc => 
                acc && acc.id && acc.id !== excludeAccountId
            );
            
            const accountResult = extractAccount(accountText, availableAccounts);
            
            if (accountResult.status === 'success') {
                return accountResult;
            } else if (accountResult.status === 'clarification') {
                return accountResult;
            }
        }
    }
    
    console.log('üîç Nenhuma conta de destino encontrada');
    return { status: 'not_found' };
}

function extractBillName(message) {
    // Buscar por padr√µes comuns de contas recorrentes
    const billPatterns = [
        /(?:meu|minha)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)\s+(?:de|vence|vale|custa)/i,
        /(?:conta\s+de\s+)([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+de|\s+vale|\s+custa|$)/i,
        /(?:paguei\s+(?:o|a)\s+)([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+de|\s+com|\s+$)/i
    ];
    
    for (const pattern of billPatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            return match[1].trim();
        }
    }
    
    // Buscar por palavras-chave espec√≠ficas
    const billKeywords = ['aluguel', 'luz', '√°gua', 'internet', 'netflix', 'spotify', 'g√°s', 'condom√≠nio'];
    for (const keyword of billKeywords) {
        if (message.includes(keyword)) {
            return keyword;
        }
    }
    
    return null;
}

function extractDueDate(message) {
    // Buscar por padr√µes de data
    const datePatterns = [
        /(?:dia\s+)(\d{1,2})/i,
        /(?:todo\s+dia\s+)(\d{1,2})/i,
        /(?:vence\s+(?:todo\s+)?dia\s+)(\d{1,2})/i,
        /(?:dia\s+)(\d{1,2})(?:\s+do\s+m√™s|\s+de\s+cada\s+m√™s)/i
    ];
    
    for (const pattern of datePatterns) {
        const match = message.match(pattern);
        if (match && match[1]) {
            const day = parseInt(match[1]);
            if (day >= 1 && day <= 31) {
                return day;
            }
        }
    }
    
    return null;
}

// Fun√ß√£o para processar respostas de esclarecimento
export const processClarificationResponse = (response, pendingAction, userAccounts, fixedBills = []) => {
    if (!pendingAction) {
        return {
            status: 'error',
            response: "N√£o h√° a√ß√£o pendente para processar."
        };
    }
    
    switch (pendingAction.type) {
        case 'correct_last_action':
            // response deve ser o tipo de corre√ß√£o
            switch (response) {
                case 'value':
                    return {
                        status: 'clarification',
                        response: "Qual √© o valor correto?",
                        pendingAction: {
                            type: 'correct_transaction_value'
                        }
                    };
                case 'account':
                    // Verificar se userAccounts √© v√°lido
                    if (!userAccounts || !Array.isArray(userAccounts)) {
                        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processClarificationResponse:', userAccounts);
                        return {
                            status: 'error',
                            response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
                        };
                    }
                    return {
                        status: 'clarification',
                        response: "Qual √© a conta correta?",
                        options: userAccounts.filter(acc => acc && acc.name && acc.id).map(acc => ({ name: acc.name, id: acc.id })),
                        pendingAction: {
                            type: 'correct_transaction_account'
                        }
                    };
                case 'description':
                    return {
                        status: 'clarification',
                        response: "Qual √© a descri√ß√£o correta?",
                        pendingAction: {
                            type: 'correct_transaction_description'
                        }
                    };
                case 'cancel':
                    return {
                        status: 'success',
                        action: 'cancel_last_transaction',
                        response: "‚úÖ √öltima transa√ß√£o cancelada com sucesso!"
                    };
                default:
                    return {
                        status: 'error',
                        response: "Op√ß√£o n√£o reconhecida."
                    };
            }
            
        case 'add_expense_with_time':
        case 'add_income_with_time':
            // Processar hor√°rio para transa√ß√µes com data passada
            const timeInfo = extractTimeFromMessage(response);
            if (!timeInfo) {
                return {
                    status: 'clarification',
                    response: 'Formato de hor√°rio n√£o reconhecido. üí° Use: "18:00", "18 horas", "18", "18,00"',
                    pendingAction: pendingAction
                };
            }
            
            // Aplicar o hor√°rio √† data
            const finalDate = new Date(pendingAction.dateInfo.date);
            finalDate.setHours(timeInfo.hours, timeInfo.minutes, 0, 0);
            
            // Registrar a transa√ß√£o com a data e hor√°rio corretos
            return {
                status: 'success',
                action: 'add_transaction',
                data: {
                    type: pendingAction.type === 'add_expense_with_time' ? 'expense' : 'income',
                    amount: pendingAction.amount,
                    description: pendingAction.description,
                    accountId: pendingAction.accountId,
                    timestamp: finalDate
                },
                response: `‚úÖ ${pendingAction.type === 'add_expense_with_time' ? 'Despesa' : 'Receita'} registrada: ${pendingAction.description} - R$ ${(pendingAction.amount || 0).toFixed(2)} na conta ${userAccounts.find(acc => acc.id === pendingAction.accountId)?.name || 'principal'} ${pendingAction.dateInfo.message} √†s ${timeInfo.formatted}`
            };
            
        case 'perform_transfer_with_time':
            // Processar hor√°rio para transfer√™ncias com data passada
            const transferTimeInfo = extractTimeFromMessage(response);
            if (!transferTimeInfo) {
                return {
                    status: 'clarification',
                    response: 'Formato de hor√°rio n√£o reconhecido. üí° Use: "18:00", "18 horas", "18", "18,00"',
                    pendingAction: pendingAction
                };
            }
            
            // Aplicar o hor√°rio √† data
            const finalTransferDate = new Date(pendingAction.dateInfo.date);
            finalTransferDate.setHours(transferTimeInfo.hours, transferTimeInfo.minutes, 0, 0);
            
            // Registrar a transfer√™ncia com a data e hor√°rio corretos
            return {
                status: 'success',
                action: 'perform_transfer',
                data: {
                    fromAccountId: pendingAction.fromAccountId,
                    toAccountId: pendingAction.toAccountId,
                    amount: pendingAction.amount,
                    timestamp: finalTransferDate
                },
                response: `‚úÖ Transfer√™ncia realizada: R$ ${(pendingAction.amount || 0).toFixed(2)} de ${userAccounts.find(acc => acc.id === pendingAction.fromAccountId)?.name || 'conta origem'} para ${userAccounts.find(acc => acc.id === pendingAction.toAccountId)?.name || 'conta destino'} ${pendingAction.dateInfo.message} √†s ${transferTimeInfo.formatted}`
            };
            
        case 'add_expense':
        case 'add_income':
            console.log(`üîç processClarificationResponse: processando ${pendingAction.type}`);
            console.log(`üîç response:`, response);
            console.log(`üîç pendingAction:`, pendingAction);
            console.log(`üîç userAccounts:`, userAccounts);
            
            // Verificar se userAccounts √© v√°lido
            if (!userAccounts || !Array.isArray(userAccounts)) {
                console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em processClarificationResponse:', userAccounts);
                return {
                    status: 'error',
                    response: 'Erro interno: contas n√£o dispon√≠veis. Tente recarregar a p√°gina.'
                };
            }
            
            // Se n√£o tem descri√ß√£o, o response deve ser a descri√ß√£o
            if (!pendingAction.description) {
                console.log(`üîç Sem descri√ß√£o, salvando descri√ß√£o: ${response}`);
                
                // Verificar se a descri√ß√£o fornecida pode ser um nome de conta
                const possibleAccount = userAccounts.find(acc => 
                    acc && acc.name && acc.name.toLowerCase() === response.toLowerCase()
                );
                
                if (possibleAccount) {
                    console.log(`üîç Descri√ß√£o pode ser uma conta, registrando diretamente`);
                    // Se a descri√ß√£o fornecida √© um nome de conta v√°lido, usar ela
                    return {
                        status: 'success',
                        action: 'add_transaction',
                        data: {
                            description: possibleAccount.name, // Usar o nome da conta como descri√ß√£o
                            amount: pendingAction.amount,
                            type: pendingAction.type === 'add_expense' ? 'expense' : 'income',
                            accountId: possibleAccount.id
                        },
                        response: `‚úÖ ${pendingAction.type === 'add_expense' ? 'Despesa' : 'Receita'} registrada: ${possibleAccount.name} - R$ ${(pendingAction.amount || 0).toFixed(2)} na conta ${possibleAccount.name}`
                    };
                }
                
                // Verificar se o amount √© v√°lido antes de usar toFixed
                if (!pendingAction.amount || isNaN(pendingAction.amount)) {
                    return {
                        status: 'error',
                        response: '‚ùå Valor da despesa n√£o foi reconhecido. Por favor, digite novamente com o valor: "Gastei R$50 em almo√ßo"',
                        pendingAction: null
                    };
                }
                
                return {
                    status: 'clarification',
                    response: `Em qual conta voc√™ ${pendingAction.type === 'add_expense' ? 'gastou' : 'recebeu'} R$ ${(pendingAction.amount || 0).toFixed(2)}?\n\nüí° **Clique em uma das op√ß√µes abaixo ou digite o nome da conta**`,
                    options: userAccounts.filter(acc => acc && acc.id && acc.name).map(acc => ({ 
                        name: `${acc.name} - Saldo: R$ ${(acc.balance || 0).toFixed(2)}`, 
                        id: acc.id 
                    })),
                    pendingAction: {
                        type: pendingAction.type,
                        amount: pendingAction.amount,
                        description: response, // Salvar a descri√ß√£o fornecida
                        accountId: null
                    }
                };
            }
            
                    // Se tem descri√ß√£o mas n√£o tem conta, o response pode ser o nome da conta ou o ID
        if (!pendingAction.accountId) {
            console.log(`üîç Sem conta, buscando conta. Response pode ser nome ou ID: ${response}`);
            
            // Primeiro, tentar encontrar por ID (caso o usu√°rio tenha clicado em uma op√ß√£o)
            let account = userAccounts.find(acc => acc && acc.id === response);
            
            // Se n√£o encontrou por ID, tentar por nome
            if (!account) {
                console.log(`üîç N√£o encontrado por ID, tentando por nome: ${response}`);
                account = userAccounts.find(acc => 
                    acc && acc.name && acc.name.toLowerCase() === response.toLowerCase()
                );
            }
            
            if (!account) {
                console.log(`‚ùå Conta n√£o encontrada para nome/ID: ${response}`);
                return {
                    status: 'error',
                    response: `‚ùå Conta "${response}" n√£o encontrada. Suas contas dispon√≠veis s√£o: ${userAccounts.map(acc => acc.name).join(', ')}`
                };
            }
            
            console.log(`üîç Conta encontrada:`, account);
            
            // Verificar saldo antes de permitir despesa
            if (pendingAction.type === 'add_expense') {
                const currentBalance = account.balance || 0;
                // Verificar se o amount √© v√°lido antes de usar
                if (!pendingAction.amount || isNaN(pendingAction.amount)) {
                    return {
                        status: 'error',
                        response: '‚ùå Valor da despesa n√£o foi reconhecido. Por favor, digite novamente com o valor: "Gastei R$50 em almo√ßo"',
                        pendingAction: null
                    };
                }
                
                if (currentBalance < pendingAction.amount) {
                    return {
                        status: 'error',
                        response: `‚ùå Saldo insuficiente! A conta "${account.name}" tem apenas R$ ${currentBalance.toFixed(2)} dispon√≠vel. Voc√™ precisa de R$ ${(pendingAction.amount || 0).toFixed(2)} para esta despesa.\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro √† conta primeiro\n‚Ä¢ Use uma conta com saldo suficiente\n‚Ä¢ Reduza o valor da despesa`
                    };
                }
                
                console.log(`‚úÖ Saldo suficiente: ${account.name} - Saldo atual: R$ ${currentBalance.toFixed(2)}, Despesa: R$ ${(pendingAction.amount || 0).toFixed(2)}`);
            }
            
            // Agora tem tudo: descri√ß√£o e conta
            const result = {
                status: 'success',
                action: 'add_transaction',
                data: {
                    description: pendingAction.description,
                    amount: pendingAction.amount,
                    type: pendingAction.type === 'add_expense' ? 'expense' : 'income',
                    accountId: account.id
                },
                response: `‚úÖ ${pendingAction.type === 'add_expense' ? 'Despesa' : 'Receita'} registrada: ${pendingAction.description} - R$ ${(pendingAction.amount || 0).toFixed(2)} na conta ${account.name}`
            };
            
            console.log(`üîç Resultado retornado:`, result);
            return result;
        }
            
            // Se chegou aqui, algo deu errado
            console.warn('‚ö†Ô∏è Estado inesperado em processClarificationResponse:', pendingAction);
            return {
                status: 'error',
                response: 'Erro interno: estado inesperado. Tente novamente.'
            };
            
        case 'create_account':
            // response deve ser o saldo inicial
            const initialBalance = parseFloat(response);
            if (isNaN(initialBalance) || initialBalance < 0) {
                // Verificar se o usu√°rio digitou texto em vez de n√∫mero
                if (isNaN(parseFloat(response)) && response.trim().length > 0) {
                    return {
                        status: 'error',
                        response: `‚ùå "${response}" n√£o √© um valor v√°lido para saldo.\n\nDigite apenas o n√∫mero: 100, 50.50, 1000`
                    };
                }
                return {
                    status: 'error',
                    response: "Por favor, informe um valor v√°lido para o saldo inicial.\n\nDigite apenas o n√∫mero: 100, 50.50, 1000"
                };
            }
            
            // Verificar se o nome da conta √© v√°lido
            if (!pendingAction.accountName || pendingAction.accountName === 'null') {
                return {
                    status: 'error',
                    response: "‚ùå Nome da conta inv√°lido. Tente novamente: \"criar conta Nubank\""
                };
            }
            
            return {
                status: 'success',
                action: 'create_account',
                data: {
                    accountName: pendingAction.accountName,
                    initialBalance: initialBalance
                },
                response: `‚úÖ Conta "${pendingAction.accountName}" criada com saldo inicial de R$ ${initialBalance.toFixed(2)}`
            };
            
        case 'transfer_source':
            // response deve ser o ID da conta de origem
            const sourceAccount = userAccounts.find(acc => acc && acc.id === response);
            if (!sourceAccount) {
                return {
                    status: 'error',
                    response: "Conta de origem n√£o encontrada. Tente novamente."
                };
            }
            
            return {
                status: 'clarification',
                response: `Para qual conta voc√™ quer transferir R$ ${(pendingAction.amount || 0).toFixed(2)}?`,
                options: userAccounts.filter(acc => acc && acc.id && acc.name && acc.id !== response).map(acc => ({ name: acc.name, id: acc.id })),
                pendingAction: {
                    type: 'transfer_destination',
                    amount: pendingAction.amount,
                    fromAccountId: response
                }
            };
            
        case 'transfer_destination':
            // response deve ser o ID da conta de destino
            const destAccount = userAccounts.find(acc => acc && acc.id === response);
            if (!destAccount) {
                return {
                    status: 'error',
                    response: "Conta de destino n√£o encontrada. Tente novamente."
                };
            }
            
            return {
                status: 'success',
                action: 'perform_transfer',
                data: {
                    fromAccountId: pendingAction.fromAccountId,
                    toAccountId: response,
                    amount: pendingAction.amount
                },
                response: `‚úÖ Transfer√™ncia configurada: R$ ${(pendingAction.amount || 0).toFixed(2)} de ${userAccounts.find(acc => acc && acc.id === pendingAction.fromAccountId)?.name} para ${destAccount.name}`
            };
            
        case 'fixed_bill_payment_selection':
            // response deve ser o ID da conta usada para pagar
            const selectedPaymentAccount = userAccounts.find(acc => acc && acc.id === response);
            if (!selectedPaymentAccount) {
                return {
                    status: 'error',
                    response: "Conta n√£o encontrada. Tente novamente."
                };
            }
            
            // Processar pagamento da conta fixa
            const billAmount = pendingAction.amount || pendingAction.billData.amount || 0;
            
            // VALIDA√á√ÉO DE SALDO - IMPEDIR PAGAMENTO SEM DINHEIRO
            const selectedAccountBalance = selectedPaymentAccount.balance || 0;
            if (selectedAccountBalance < billAmount) {
                return {
                    status: 'error',
                    response: `‚ùå Saldo insuficiente! A conta "${selectedPaymentAccount.name}" tem apenas R$ ${selectedAccountBalance.toFixed(2)} dispon√≠vel. Voc√™ precisa de R$ ${billAmount.toFixed(2)} para pagar ${pendingAction.billData.name}.\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro √† conta primeiro\n‚Ä¢ Use uma conta com saldo suficiente\n‚Ä¢ Reduza o valor da conta fixa\n\nüîÑ **Tente novamente escolhendo outra conta:**`,
                    options: userAccounts.filter(acc => acc && acc.name && acc.id && acc.balance >= billAmount).map(acc => ({
                        name: `${acc.name} - Saldo: R$ ${acc.balance.toFixed(2)} ‚úÖ`,
                        id: acc.id,
                        accountData: acc
                    })),
                    pendingAction: {
                        type: 'fixed_bill_payment_selection',
                        billData: pendingAction.billData,
                        amount: pendingAction.amount,
                        originalMessage: pendingAction.originalMessage
                    }
                };
            }
            
            // Saldo suficiente - permitir pagamento
            return {
                status: 'success',
                action: 'add_transaction',
                data: {
                    description: `Pagamento de ${pendingAction.billData.name}`,
                    amount: billAmount,
                    type: 'expense',
                    accountId: response
                },
                response: `‚úÖ Pagamento de ${pendingAction.billData.name} (R$ ${billAmount.toFixed(2)}) registrado na conta ${selectedPaymentAccount.name}!`
            };
            
        case 'mark_bill_as_paid':
            // response deve ser o ID da conta usada para pagar
            const paymentAccount = userAccounts.find(acc => acc && acc.id === response);
            if (!paymentAccount) {
                return {
                    status: 'error',
                    response: "Conta n√£o encontrada. Tente novamente."
                };
            }
            
            // VALIDA√á√ÉO DE SALDO - IMPEDIR PAGAMENTO SEM DINHEIRO
            const paymentAccountBalance = paymentAccount.balance || 0;
            if (paymentAccountBalance < pendingAction.amount) {
                return {
                    status: 'error',
                    response: `‚ùå Saldo insuficiente! A conta "${paymentAccount.name}" tem apenas R$ ${paymentAccountBalance.toFixed(2)} dispon√≠vel. Voc√™ precisa de R$ ${pendingAction.amount.toFixed(2)} para pagar ${pendingAction.billName}.\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro √† conta primeiro\n‚Ä¢ Use uma conta com saldo suficiente\n‚Ä¢ Reduza o valor da conta fixa\n\nüîÑ **Tente novamente escolhendo outra conta:**`,
                    options: userAccounts.filter(acc => acc && acc.name && acc.id && acc.balance >= pendingAction.amount).map(acc => ({
                        name: `${acc.name} - Saldo: R$ ${acc.balance.toFixed(2)} ‚úÖ`,
                        id: acc.id,
                        accountData: acc
                    })),
                    pendingAction: {
                        type: 'mark_bill_as_paid',
                        billId: pendingAction.billId,
                        billName: pendingAction.billName,
                        amount: pendingAction.amount,
                        mentionedBank: pendingAction.mentionedBank
                    }
                };
            }
            
            // Saldo suficiente - permitir pagamento
            return {
                status: 'success',
                action: 'mark_bill_as_paid',
                data: {
                    billId: pendingAction.billId,
                    billName: pendingAction.billName,
                    amount: pendingAction.amount,
                    accountId: response,
                    mentionedBank: pendingAction.mentionedBank
                },
                response: `‚úÖ Pagamento de ${pendingAction.billName} (R$ ${pendingAction.amount.toFixed(2)}) registrado na conta ${paymentAccount.name}!`
            };
            
        case 'select_fixed_bill_for_payment':
            // response deve ser o ID da conta fixa selecionada
            // Preciso encontrar a conta fixa baseada no ID retornado
            const selectedBill = fixedBills.find(bill => bill.id === response);
            if (!selectedBill) {
                return {
                    status: 'error',
                    response: "Erro interno: conta fixa selecionada n√£o encontrada. Tente novamente."
                };
            }
            
            // Se um banco foi mencionado, tentar processar diretamente
            if (pendingAction.mentionedBank) {
                const bankAccount = findBankAccount(pendingAction.mentionedBank, userAccounts);
                if (bankAccount) {
                    // VALIDA√á√ÉO DE SALDO - IMPEDIR PAGAMENTO SEM DINHEIRO
                    const bankAccountBalance = bankAccount.balance || 0;
                    if (bankAccountBalance < selectedBill.amount) {
                        return {
                            status: 'error',
                            response: `‚ùå Saldo insuficiente! A conta "${bankAccount.name}" tem apenas R$ ${bankAccountBalance.toFixed(2)} dispon√≠vel. Voc√™ precisa de R$ ${selectedBill.amount.toFixed(2)} para pagar ${selectedBill.name}.\n\nüí° **Sugest√µes:**\n‚Ä¢ Adicione dinheiro √† conta primeiro\n‚Ä¢ Use uma conta com saldo suficiente\n‚Ä¢ Reduza o valor da conta fixa\n\nüîÑ **Tente novamente escolhendo outra conta:**`,
                            options: userAccounts.filter(acc => acc && acc.name && acc.id && acc.balance >= selectedBill.amount).map(acc => ({
                                name: `${acc.name} - Saldo: R$ ${acc.balance.toFixed(2)} ‚úÖ`,
                                id: acc.id,
                                accountData: acc
                            })),
                            pendingAction: {
                                type: 'select_fixed_bill_for_payment',
                                billName: pendingAction.billName,
                                mentionedBank: pendingAction.mentionedBank
                            }
                        };
                    }
                    
                    // Saldo suficiente - permitir pagamento
                    return {
                        status: 'success',
                        action: 'mark_bill_as_paid',
                        data: {
                            billId: selectedBill.id,
                            billName: selectedBill.name,
                            amount: selectedBill.amount,
                            accountId: bankAccount.id,
                            bankName: bankAccount.name
                        },
                        response: `‚úÖ Pagamento de ${selectedBill.name} (R$ ${selectedBill.amount.toFixed(2)}) registrado automaticamente na conta ${bankAccount.name}!`
                    };
                }
            }
            
            // Caso padr√£o: perguntar de qual conta foi usado o dinheiro
            return {
                status: 'clarification',
                response: `√ìtimo! De qual conta voc√™ usou o dinheiro para pagar ${selectedBill.name} (R$ ${selectedBill.amount.toFixed(2)})?`,
                options: userAccounts.filter(acc => acc && acc.name && acc.id).map(acc => ({ name: acc.name, id: acc.id })),
                pendingAction: {
                    type: 'mark_bill_as_paid',
                    billId: selectedBill.id,
                    billName: selectedBill.name,
                    amount: selectedBill.amount,
                    mentionedBank: pendingAction.mentionedBank
                }
            };
            
        case 'clarify_month_for_summary':
            if (response === "Sim") {
                // Usar o per√≠odo j√° definido (m√™s atual)
                return {
                    status: 'success',
                    action: 'get_summary',
                    data: {
                        startDate: pendingAction.timePeriod.startDate,
                        endDate: pendingAction.timePeriod.endDate,
                        period: pendingAction.timePeriod.period
                    },
                    response: '' // N√£o exibir mensagem redundante
                };
            } else {
                // Perguntar qual m√™s
                return {
                    status: 'clarification',
                    response: "De qual m√™s voc√™ gostaria de ver o resumo?",
                    pendingAction: {
                        type: 'specify_month_for_summary',
                        timePeriod: pendingAction.timePeriod
                    }
                };
            }
            
        case 'specify_month_for_summary':
            // response deve ser o nome ou n√∫mero do m√™s
            const monthInput = response.toLowerCase();
            let monthIndex = -1;
            
            // Tentar extrair m√™s por nome
            const monthNames = {
                'janeiro': 0, 'fevereiro': 1, 'mar√ßo': 2, 'abril': 3, 'maio': 4, 'junho': 5,
                'julho': 6, 'agosto': 7, 'setembro': 8, 'outubro': 9, 'novembro': 10, 'dezembro': 11
            };
            
            if (monthNames[monthInput]) {
                monthIndex = monthNames[monthInput];
            } else {
                // Tentar extrair por n√∫mero
                const monthNumberMatch = monthInput.match(/(\d{1,2})/);
                if (monthNumberMatch) {
                    monthIndex = parseInt(monthNumberMatch[1]) - 1;
                }
            }
            
            if (monthIndex >= 0 && monthIndex <= 11) {
                const currentYear = new Date().getFullYear();
                const startDate = new Date(currentYear, monthIndex, pendingAction.timePeriod.startDate.getDate());
                const endDate = new Date(currentYear, monthIndex, pendingAction.timePeriod.endDate.getDate(), 23, 59, 59);
                
                return {
                    status: 'success',
                    action: 'get_summary',
                    data: {
                        startDate: startDate,
                        endDate: endDate,
                        period: `do dia ${pendingAction.timePeriod.startDate.getDate()} ao dia ${pendingAction.timePeriod.endDate.getDate()} de ${Object.keys(monthNames)[monthIndex]}`
                    },
                    response: '' // N√£o exibir mensagem redundante
                };
            } else {
                return {
                    status: 'error',
                    response: "M√™s n√£o reconhecido. Por favor, digite o nome do m√™s (ex: 'janeiro') ou o n√∫mero (ex: '1')."
                };
            }
            
        default:
            return {
                status: 'error',
                response: "A√ß√£o n√£o reconhecida."
            };
    }
};

// Fun√ß√µes para extrair informa√ß√µes das mensagens
function extractExpenseDetails(message) {
    // Valor com reconhecimento robusto
    let amount = extractMonetaryValue(message);
    if (amount === null) {
        const amountMatch = message.match(/r?\$?\s*(\d+[.,]?\d*)/i);
        amount = amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null;
    }
    
    // Extrair data da mensagem
    let dateInfo = extractDateFromMessage(message);
    
    // Descri√ß√£o com m√∫ltiplas estrat√©gias
    let description = null;
    let personName = null;
    
    // 1) Tentar via padr√£o cl√°ssico "ap√≥s o valor"
    const amountMatch = message.match(/r?\$?\s*(\d+[.,]?\d*)/i);
    if (amountMatch) {
        const afterAmount = message.substring(amountMatch.index + amountMatch[0].length);
        const descriptionMatch = afterAmount.match(/\s+(?:em|com|de|para|no|na)\s+(.+)/i);
        if (descriptionMatch) {
            description = descriptionMatch[1].trim();
        }
    }
    
    // 2) Se n√£o encontrou, usar estrat√©gia avan√ßada (antes/depois do valor)
    if (!description && amount !== null) {
        description = extractDescriptionAdvanced(message, amount);
    }
    
    // 3) Limpezas e extra√ß√µes adicionais
    if (description) {
        // Remover termos de tempo comuns finais
        description = description.replace(/\b(hoje|ontem|amanh√£)\b/gi, '').trim();
        // Remover palavras de moeda caso tenham ficado
        description = description.replace(/\b(reais?|real|contos?|centavos?)\b/gi, '').trim();
        // Remover sobras num√©ricas isoladas
        description = description.replace(/(^|\s)(\d+[.,]?\d*)(?=$|\s)/g, ' ').trim();
        
        // Extrair nome da pessoa para transa√ß√µes de pix
        if (message.toLowerCase().includes('pix')) {
            // Padr√£o "para [nome]" ou "de [nome]"
            const personMatch = message.match(/(?:para|pra)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+(?:do|da|no|na|hoje|ontem|amanh√£|reais?|real|contos?|centavos?|$))/i);
            if (personMatch) {
                personName = personMatch[1].trim();
                // Remover o nome da pessoa da descri√ß√£o
                description = description.replace(new RegExp(`(?:para|pra)\\s+${personMatch[1].replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}`, 'i'), '').trim();
            }
        } else {
            // Padr√£o gen√©rico para outras transa√ß√µes
            const personMatch = description.match(/(?:de|com)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+(?:me\s+)?(?:pagou|pago|recebeu|recebido|deveu|deve))/i);
            if (personMatch) {
                personName = personMatch[1].trim();
                description = description.replace(personMatch[0], '').trim();
            }
        }
        // Se ap√≥s limpeza a descri√ß√£o ficou vazia ou muito gen√©rica, tentar trecho antes do valor
        if (!description || /^$/.test(description)) {
            if (amount !== null) {
                const amountRegex = new RegExp(`(.+?)\\s+(?:r?\\$?\\s*${amount}(?:[.,]?\\d*)?(?:\\s*(?:reais?|real|contos?))?)`, 'i');
                const beforeMatch = message.match(amountRegex);
                if (beforeMatch && beforeMatch[1]) {
                    let candidate = beforeMatch[1].trim();
                    candidate = candidate.replace(/^\b(paguei|gastei|comprei|pago|pagar|paguei\s+(a|o)|gastei\s+(com|em))\b\s*/i, '').trim();
                    candidate = candidate.replace(/^\b(a|o|um|uma)\b\s*/i, '').trim();
                    description = candidate.length > 0 ? candidate : description;
                }
            }
        }
    } else {
        // 4) √öltimo recurso: tentar capturar trecho antes do valor como descri√ß√£o
        if (amount !== null) {
            const amountRegex = new RegExp(`(.+?)\\s+(?:r?\\$?\\s*${amount}(?:[.,]?\\d*)?(?:\\s*(?:reais?|real|contos?))?)`, 'i');
            const beforeMatch = message.match(amountRegex);
            if (beforeMatch && beforeMatch[1]) {
                let candidate = beforeMatch[1].trim();
                // Remover verbos comuns no in√≠cio
                candidate = candidate.replace(/^\b(paguei|gastei|comprei|pago|pagar|paguei\s+(a|o)|gastei\s+(com|em))\b\s*/i, '').trim();
                // Remover artigos no in√≠cio
                candidate = candidate.replace(/^\b(a|o|um|uma)\b\s*/i, '').trim();
                description = candidate.length > 0 ? candidate : null;
            }
        }
    }
    
    return {
        amount,
        description,
        personName,
        dateInfo,
        originalMessage: message
    };
}

// Fun√ß√£o para extrair detalhes de contas fixas mensais
function extractFixedBillDetails(message) {
    const lowerMsg = message.toLowerCase();
    
    // Extrair valor
    let amount = extractMonetaryValue(message);
    if (amount === null) {
        const amountMatch = message.match(/r?\$?\s*(\d+[.,]?\d*)/i);
        amount = amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null;
    }
    
    // Extrair nome da conta fixa
    let name = null;
    
    // 1) Tentar extrair nome antes do valor
    if (amount !== null) {
        const amountRegex = new RegExp(`(.+?)\\s+(?:r?\\$?\\s*${amount}(?:[.,]?\\d*)?(?:\\s*(?:reais?|real|contos?))?)`, 'i');
        const beforeMatch = message.match(amountRegex);
        if (beforeMatch && beforeMatch[1]) {
            let candidate = beforeMatch[1].trim();
            // Remover artigos e preposi√ß√µes comuns
            candidate = candidate.replace(/^\b(a|o|um|uma|de|da|do|em|no|na)\b\s*/i, '').trim();
            if (candidate.length > 0) {
                name = candidate;
            }
        }
    }
    
    // 2) Se n√£o encontrou, tentar extrair de palavras-chave espec√≠ficas
    if (!name) {
        const fixedBillKeywords = [
            'aluguel', 'condom√≠nio', 'internet', 'energia', '√°gua', 'g√°s', 'telefone', 'celular',
            'assinatura', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'youtube'
        ];
        
        for (const keyword of fixedBillKeywords) {
            if (lowerMsg.includes(keyword)) {
                name = keyword;
                break;
            }
        }
    }
    
    // 3) Se ainda n√£o encontrou, usar a primeira palavra significativa
    if (!name) {
        const words = message.split(/\s+/);
        for (const word of words) {
            if (word.length > 2 && !/\d/.test(word) && !['reais', 'real', 'r$', 'todo', 'm√™s', 'dia'].includes(word.toLowerCase())) {
                name = word;
                break;
            }
        }
    }
    
    // Extrair dia do m√™s
    let dueDay = null;
    const dayMatch = message.match(/dia\s+(\d{1,2})/i);
    if (dayMatch) {
        dueDay = parseInt(dayMatch[1]);
    }
    
    // Extrair frequ√™ncia
    let frequency = 'monthly'; // Padr√£o mensal
    if (lowerMsg.includes('semanal') || lowerMsg.includes('toda semana')) {
        frequency = 'weekly';
    } else if (lowerMsg.includes('quinzenal') || lowerMsg.includes('a cada 15 dias')) {
        frequency = 'biweekly';
    } else if (lowerMsg.includes('anual') || lowerMsg.includes('todo ano')) {
        frequency = 'yearly';
    }
    
    // Extrair categoria baseada no nome
    let category = 'utilities';
    if (name) {
        const lowerName = name.toLowerCase();
        if (['aluguel', 'condom√≠nio'].includes(lowerName)) {
            category = 'housing';
        } else if (['internet', 'telefone', 'celular', 'netflix', 'spotify', 'prime', 'disney', 'hbo', 'youtube'].includes(lowerName)) {
            category = 'entertainment';
        } else if (['energia', '√°gua', 'g√°s'].includes(lowerName)) {
            category = 'utilities';
        } else if (['assinatura'].includes(lowerName)) {
            category = 'subscriptions';
        }
    }
    
    return {
        name,
        amount,
        dueDay,
        frequency,
        category,
        originalMessage: message
    };
}

function extractIncomeDetails(message) {
    // Valor robusto
    let amount = extractMonetaryValue(message);
    if (amount === null) {
        const amountMatch = message.match(/r?\$?\s*(\d+[.,]?\d*)/i);
        amount = amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null;
    }
    
    // Extrair data da mensagem
    let dateInfo = extractDateFromMessage(message);
    
    // Descri√ß√£o
    let description = null;
    let personName = null;
    
    // 1) Ap√≥s o valor
    const amountMatch = message.match(/r?\$?\s*(\d+[.,]?\d*)/i);
    if (amountMatch) {
        const afterAmount = message.substring(amountMatch.index + amountMatch[0].length);
        const descriptionMatch = afterAmount.match(/\s+(?:de|com|para|no|na)\s+(.+)/i);
        if (descriptionMatch) {
            description = descriptionMatch[1].trim();
        }
    }
    
    // 2) Estrat√©gia avan√ßada (antes/depois)
    if (!description && amount !== null) {
        description = extractDescriptionAdvanced(message, amount);
    }
    
    // 3) Limpeza e pessoa
    if (description) {
        description = description.replace(/\b(hoje|ontem|amanh√£)\b/gi, '').trim();
        description = description.replace(/\b(reais?|real|contos?|centavos?)\b/gi, '').trim();
        description = description.replace(/(^|\s)(\d+[.,]?\d*)(?=$|\s)/g, ' ').trim();
        const personMatch = description.match(/(?:de|com)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+(?:me\s+)?(?:pagou|pago|recebeu|recebido|deveu|deve))/i);
        if (personMatch) {
            personName = personMatch[1].trim();
            description = description.replace(personMatch[0], '').trim();
        }
        if (!description || /^$/.test(description)) {
            if (amount !== null) {
                const amountRegex = new RegExp(`(.+?)\\s+(?:r?\\$?\\s*${amount}(?:[.,]?\\d*)?(?:\\s*(?:reais?|real|contos?))?)`, 'i');
                const beforeMatch = message.match(amountRegex);
                if (beforeMatch && beforeMatch[1]) {
                    let candidate = beforeMatch[1].trim();
                    candidate = candidate.replace(/^\b(recebi|ganhei|entrou|depositaram|caiu|recebemos)\b\s*/i, '').trim();
                    candidate = candidate.replace(/^\b(a|o|um|uma)\b\s*/i, '').trim();
                    description = candidate.length > 0 ? candidate : description;
                }
            }
        }
    } else {
        // 4) Tentar trecho antes do valor
        if (amount !== null) {
            const amountRegex = new RegExp(`(.+?)\\s+(?:r?\\$?\\s*${amount}(?:[.,]?\\d*)?(?:\\s*(?:reais?|real|contos?))?)`, 'i');
            const beforeMatch = message.match(amountRegex);
            if (beforeMatch && beforeMatch[1]) {
                let candidate = beforeMatch[1].trim();
                candidate = candidate.replace(/^\b(recebi|ganhei|entrou|depositaram|caiu|recebemos)\b\s*/i, '').trim();
                candidate = candidate.replace(/^\b(a|o|um|uma)\b\s*/i, '').trim();
                description = candidate.length > 0 ? candidate : null;
            }
        }
    }
    
    return {
        amount,
        description,
        personName,
        dateInfo,
        originalMessage: message
    };
}

function extractPixQueryDetails(message) {
    console.log('üîç extractPixQueryDetails chamado com:', message);
    
    // Extrair nome da pessoa
    let personName = null;
    const personMatch = message.match(/(?:para|pra|com)\s+([a-z√°√†√¢√£√©√®√™√≠√¨√Æ√≥√≤√¥√µ√∫√π√ª√ß\s]+?)(?:\s+(?:do|da|no|na|hoje|ontem|amanh√£|reais?|real|contos?|centavos?|$|\?))/i);
    if (personMatch) {
        personName = personMatch[1].trim();
        console.log('üîç Nome da pessoa extra√≠do:', personName);
    }
    
    // Extrair valor (se mencionado)
    let amount = null;
    const amountMatch = message.match(/(\d+[.,]?\d*)/i);
    if (amountMatch) {
        amount = parseFloat(amountMatch[1].replace(',', '.'));
        console.log('üîç Valor extra√≠do:', amount);
    }
    
    // Extrair per√≠odo
    let period = 'today';
    if (message.toLowerCase().includes('ontem')) {
        period = 'yesterday';
    } else if (message.toLowerCase().includes('hoje')) {
        period = 'today';
    } else if (message.toLowerCase().includes('semana')) {
        period = 'week';
    } else if (message.toLowerCase().includes('m√™s') || message.toLowerCase().includes('mes')) {
        period = 'month';
    }
    
    return { personName, amount, period };
}

function extractTransferDetails(message, userAccounts) {
    console.log('üîç extractTransferDetails chamado com:', message);
    
    const amountMatch = message.match(/(\d+[.,]?\d*)/i);
    const amount = amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null;
    console.log('üîç Valor extra√≠do:', amount);
    
    // Extrair data da mensagem
    let dateInfo = extractDateFromMessage(message);
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em extractTransferDetails:', userAccounts);
        return { amount, fromAccount: null, toAccount: null };
    }
    
    console.log('üîç Contas dispon√≠veis:', userAccounts.map(acc => acc.name));
    
    // Extrair conta de origem usando a fun√ß√£o melhorada
    const fromAccountResult = extractSourceAccount(message, userAccounts);
    console.log('üîç Resultado da conta de origem:', fromAccountResult);
    let fromAccount = null;
    
    if (fromAccountResult.status === 'success') {
        fromAccount = userAccounts.find(acc => acc.id === fromAccountResult.accountId);
        console.log('üîç Conta de origem encontrada:', fromAccount?.name);
    } else if (fromAccountResult.status === 'clarification') {
        // Se precisa de esclarecimento, retornar para o usu√°rio escolher
        return {
            amount,
            fromAccount: null,
            toAccount: null,
            needsClarification: true,
            clarificationData: fromAccountResult
        };
    }
    
    // Extrair conta de destino usando a fun√ß√£o melhorada
    const toAccountResult = extractDestinationAccount(message, userAccounts, fromAccount?.id);
    console.log('üîç Resultado da conta de destino:', toAccountResult);
    let toAccount = null;
    
    if (toAccountResult.status === 'success') {
        toAccount = userAccounts.find(acc => acc.id === toAccountResult.accountId);
        console.log('üîç Conta de destino encontrada:', toAccount?.name);
    } else if (toAccountResult.status === 'clarification') {
        // Se precisa de esclarecimento, retornar para o usu√°rio escolher
        return {
            amount,
            fromAccount,
            toAccount: null,
            needsClarification: true,
            clarificationData: toAccountResult
        };
    }
    
    // Se n√£o encontrou com as fun√ß√µes inteligentes, tentar m√©todo antigo como fallback
    if (!fromAccount || !toAccount) {
        console.log('üîç Usando fallback para encontrar contas...');
        
        // Buscar por nomes de contas no texto
        const foundAccounts = [];
        
        for (const account of userAccounts) {
            if (account && account.name && message.toLowerCase().includes(account.name.toLowerCase())) {
                foundAccounts.push(account);
                console.log('üîç Conta encontrada no texto:', account.name);
            }
        }
        
        console.log('üîç Total de contas encontradas no texto:', foundAccounts.length);
        
        // Se encontrou exatamente duas contas, usar elas
        if (foundAccounts.length === 2) {
            // Usar o padr√£o "de X para Y" para determinar a ordem correta
            const deParaMatch = message.match(/(?:de|da|do)\s+(.+?)\s+(?:para|pra)\s+(.+?)(?:\s|$)/i);
            if (deParaMatch) {
                const fromName = deParaMatch[1].trim();
                const toName = deParaMatch[2].trim();
                console.log('üîç Padr√£o "de X para Y" encontrado:', fromName, '->', toName);
                
                // Encontrar a conta de origem baseada no padr√£o "de X"
                // Remover palavras como "conta", "banco", etc. para melhor matching
                const cleanFromName = fromName.replace(/(?:conta|banco|cart√£o)\s+/gi, '').trim();
                console.log('üîç Nome limpo para origem:', cleanFromName);
                
                // Ordenar as contas encontradas por especificidade (mais longas primeiro)
                const sortedAccounts = [...foundAccounts].sort((a, b) => b.name.length - a.name.length);
                
                fromAccount = sortedAccounts.find(acc => 
                    acc.name.toLowerCase().includes(cleanFromName.toLowerCase()) ||
                    cleanFromName.toLowerCase().includes(acc.name.toLowerCase())
                );
                
                // Encontrar a conta de destino baseada no padr√£o "para Y"
                const cleanToName = toName.replace(/(?:conta|banco|cart√£o)\s+/gi, '').trim();
                console.log('üîç Nome limpo para destino:', cleanToName);
                
                // Para o destino, excluir a conta de origem e ordenar por especificidade
                const availableDestAccounts = sortedAccounts.filter(acc => acc.id !== fromAccount?.id);
                toAccount = availableDestAccounts.find(acc => 
                    acc.name.toLowerCase().includes(cleanToName.toLowerCase()) ||
                    cleanToName.toLowerCase().includes(acc.name.toLowerCase())
                );
                
                console.log('üîç Contas encontradas pelo padr√£o:', fromAccount?.name, '->', toAccount?.name);
            } else {
                // Se n√£o encontrou o padr√£o, usar a primeira e segunda contas encontradas
                fromAccount = foundAccounts[0];
                toAccount = foundAccounts[1];
                console.log('üîç Usando as duas contas encontradas na ordem:', fromAccount.name, '->', toAccount.name);
            }
        }
        // Se encontrou mais de duas contas, tentar pelo padr√£o "de X para Y"
        else if (foundAccounts.length > 2) {
            const deParaMatch = message.match(/(?:de|da|do)\s+(.+?)\s+(?:para|pra)\s+(.+?)(?:\s|$)/i);
            if (deParaMatch) {
                const fromName = deParaMatch[1].trim();
                const toName = deParaMatch[2].trim();
                console.log('üîç Padr√£o "de X para Y" encontrado:', fromName, '->', toName);
                
                // Remover palavras como "conta", "banco", etc. para melhor matching
                const cleanFromName = fromName.replace(/(?:conta|banco|cart√£o)\s+/gi, '').trim();
                const cleanToName = toName.replace(/(?:conta|banco|cart√£o)\s+/gi, '').trim();
                
                // Ordenar as contas encontradas por especificidade (mais longas primeiro)
                const sortedAccounts = [...foundAccounts].sort((a, b) => b.name.length - a.name.length);
                
                fromAccount = sortedAccounts.find(acc =>
                    acc.name.toLowerCase().includes(cleanFromName.toLowerCase()) ||
                    cleanFromName.toLowerCase().includes(acc.name.toLowerCase())
                );
                
                // Para o destino, excluir a conta de origem e ordenar por especificidade
                const availableDestAccounts = sortedAccounts.filter(acc => acc.id !== fromAccount?.id);
                toAccount = availableDestAccounts.find(acc =>
                    acc.name.toLowerCase().includes(cleanToName.toLowerCase()) ||
                    cleanToName.toLowerCase().includes(acc.name.toLowerCase())
                );
                
                console.log('üîç Contas encontradas pelo padr√£o:', fromAccount?.name, '->', toAccount?.name);
            }
        }
    }
    
    console.log('üîç Resultado final:', { 
        amount, 
        fromAccount: fromAccount?.name, 
        toAccount: toAccount?.name 
    });
    
    return { amount, fromAccount, toAccount, dateInfo };
}

function extractPeriodFromMessage(message) {
    // Usar a fun√ß√£o parseTimePeriod que j√° reconhece "ontem", "hoje", etc.
    console.log('üîç extractPeriodFromMessage chamado com:', message);
    const timeResult = parseTimePeriod(message);
    console.log('üîç parseTimePeriod retornou:', timeResult);
    if (timeResult) {
        return timeResult;
    }
    
    const now = new Date();
    let period = '';
    let startDate = null;
    let endDate = null;
    
    if (message.includes('este m√™s') || message.includes('m√™s atual')) {
        period = 'este m√™s';
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    } else if (message.includes('√∫ltima semana') || message.includes('semana passada')) {
        period = '√∫ltima semana';
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        endDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    } else if (message.includes('janeiro')) {
        period = 'janeiro';
        startDate = new Date(now.getFullYear(), 0, 1);
        endDate = new Date(now.getFullYear(), 1, 0);
    } else if (message.includes('fevereiro')) {
        period = 'fevereiro';
        startDate = new Date(now.getFullYear(), 1, 1);
        endDate = new Date(now.getFullYear(), 2, 0);
    } else if (message.includes('mar√ßo')) {
        period = 'mar√ßo';
        startDate = new Date(now.getFullYear(), 2, 1);
        endDate = new Date(now.getFullYear(), 3, 0);
    } else if (message.includes('abril')) {
        period = 'abril';
        startDate = new Date(now.getFullYear(), 3, 1);
        endDate = new Date(now.getFullYear(), 4, 0);
    } else if (message.includes('maio')) {
        period = 'maio';
        startDate = new Date(now.getFullYear(), 4, 1);
        endDate = new Date(now.getFullYear(), 5, 0);
    } else if (message.includes('junho')) {
        period = 'junho';
        startDate = new Date(now.getFullYear(), 5, 1);
        endDate = new Date(now.getFullYear(), 6, 0);
    } else if (message.includes('julho')) {
        period = 'julho';
        startDate = new Date(now.getFullYear(), 6, 1);
        endDate = new Date(now.getFullYear(), 7, 0);
    } else if (message.includes('agosto')) {
        period = 'agosto';
        startDate = new Date(now.getFullYear(), 7, 1);
        endDate = new Date(now.getFullYear(), 8, 0);
    } else if (message.includes('setembro')) {
        period = 'setembro';
        startDate = new Date(now.getFullYear(), 8, 1);
        endDate = new Date(now.getFullYear(), 9, 0);
    } else if (message.includes('outubro')) {
        period = 'outubro';
        startDate = new Date(now.getFullYear(), 9, 1);
        endDate = new Date(now.getFullYear(), 10, 0);
    } else if (message.includes('novembro')) {
        period = 'novembro';
        startDate = new Date(now.getFullYear(), 10, 1);
        endDate = new Date(now.getFullYear(), 11, 0);
    } else if (message.includes('dezembro')) {
        period = 'dezembro';
        startDate = new Date(now.getFullYear(), 11, 1);
        endDate = new Date(now.getFullYear(), 12, 0);
    }
    
    // Se n√£o encontrou nenhum per√≠odo espec√≠fico, retornar objeto vazio
    if (!period) {
        console.log('üîç Nenhum per√≠odo encontrado, retornando objeto vazio');
        return { period: '', startDate: null, endDate: null };
    }
    
    console.log('üîç Per√≠odo encontrado:', period, 'startDate:', startDate, 'endDate:', endDate);
    return { period, startDate, endDate };
}

function selectDefaultAccount(userAccounts) {
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido em selectDefaultAccount:', userAccounts);
        return null;
    }
    
    // Se s√≥ tem uma conta, usar ela
    if (userAccounts.length === 1) {
        return userAccounts[0] && userAccounts[0].id ? userAccounts[0].id : null;
    }
    
    // Se tem m√∫ltiplas contas, n√£o selecionar automaticamente
    return null;
}

// Fun√ß√£o para melhorar o reconhecimento de valores monet√°rios
function extractMonetaryValue(message) {
    const patterns = [
        /r?\$?\s*(\d+[.,]?\d*)/i,                    // R$25, R$25.50, 25, 25.50
        /(\d+[.,]?\d*)\s*reais?/i,                   // 25 reais, 25.50 reais
        /(\d+[.,]?\d*)\s*contos?/i,                  // 25 contos, 25.50 contos
        /(\d+[.,]?\d*)\s*real/i,                     // 25 real, 25.50 real
        /(\d+[.,]?\d*)\s*centavos?/i,                // 25 centavos
        /(\d+[.,]?\d*)\s*centavo/i                    // 25 centavo
    ];
    
    for (const pattern of patterns) {
        const match = message.match(pattern);
        if (match) {
            let value = parseFloat(match[1].replace(',', '.'));
            
            // Converter centavos para reais se necess√°rio
            if (message.toLowerCase().includes('centavo')) {
                value = value / 100;
            }
            
            return value;
        }
    }
    
    return null;
}

// Fun√ß√£o para melhorar o reconhecimento de descri√ß√µes
function extractDescriptionAdvanced(message, amount) {
    const lowerMsg = message.toLowerCase();
    let description = null;
    
    // Remover o valor da mensagem para extrair a descri√ß√£o
    let cleanMessage = lowerMsg.replace(new RegExp(`r?\\$?\\s*${amount}[.,]?\\d*`, 'gi'), '');
    
    // Buscar por preposi√ß√µes que indicam descri√ß√£o
    const descriptionPatterns = [
        /(?:em|com|de|para|no|na|sobre|referente\s+a)\s+(.+)/i,
        /(.+?)(?:\s+(?:da\s+conta|no|na|com|para))/i
    ];
    
    for (const pattern of descriptionPatterns) {
        const match = cleanMessage.match(pattern);
        if (match && match[1]) {
            description = match[1].trim();
            
            // Limpar palavras desnecess√°rias
            description = description.replace(/\b(da conta|no|na|com|para|de|do|da|em|sobre|referente a)\b/gi, '').trim();
            
            if (description.length > 0) {
                break;
            }
        }
    }
    
    // Se n√£o encontrou com padr√µes, tentar extrair o que vem ap√≥s o valor
    if (!description) {
        const amountIndex = lowerMsg.indexOf(amount.toString());
        if (amountIndex !== -1) {
            const afterAmount = message.substring(amountIndex + amount.toString().length);
            const words = afterAmount.trim().split(/\s+/);
            
            // Filtrar palavras relevantes
            const relevantWords = words.filter(word => 
                word.length > 2 && 
                !['em', 'com', 'de', 'para', 'no', 'na', 'da', 'do', 'da'].includes(word.toLowerCase())
            );
            
            if (relevantWords.length > 0) {
                description = relevantWords.join(' ');
            }
        }
    }
    
    return description || null;
}

// Fun√ß√£o para validar nomes de contas duplicados
function validateAccountName(accountName, userAccounts) {
    if (!accountName || accountName.trim() === '') {
        return { isValid: false, error: 'Nome da conta n√£o pode estar vazio.' };
    }
    
    if (accountName.length < 2) {
        return { isValid: false, error: 'Nome da conta deve ter pelo menos 2 caracteres.' };
    }
    
    // Verificar se userAccounts √© v√°lido
    if (!userAccounts || !Array.isArray(userAccounts)) {
        console.warn('‚ö†Ô∏è userAccounts √© inv√°lido:', userAccounts);
        return { isValid: true }; // Permitir cria√ß√£o se n√£o conseguir validar
    }
    
    // Verificar se j√° existe uma conta com nome EXATO (case-insensitive)
    const exactMatch = userAccounts.find(acc => 
        acc && acc.name && acc.name.toLowerCase() === accountName.toLowerCase()
    );
    
    if (exactMatch) {
        return { 
            isValid: false, 
            error: `J√° existe uma conta chamada "${exactMatch.name}". Use um nome diferente.`,
            suggestion: `Exemplo: "Nubank Pessoal" vs "Nubank Empresarial"`
        };
    }
    
    // Verificar se h√° conflitos com nomes muito similares que podem causar confus√£o
    const similarAccounts = userAccounts.filter(acc => {
        if (!acc || !acc.name) return false;
        
        const existingName = acc.name.toLowerCase();
        const newName = accountName.toLowerCase();
        
        // Se um nome √© completamente contido no outro, pode ser confuso
        if (existingName.includes(newName) || newName.includes(existingName)) {
            // Mas permitir se a diferen√ßa for significativa (mais de 3 caracteres)
            const difference = Math.abs(existingName.length - newName.length);
            if (difference <= 3) {
                // Verificar se s√£o claramente diferentes (ex: "Nubank" vs "Nubank Empresarial")
                const words1 = existingName.split(/\s+/);
                const words2 = newName.split(/\s+/);
                
                // Se ambos t√™m mais de uma palavra, permitir
                if (words1.length > 1 || words2.length > 1) {
                    return false; // N√£o √© conflito
                }
                
                // Se um √© muito similar ao outro, pode ser confuso
                return true;
            }
        }
        
        return false;
    });
    
    if (similarAccounts.length > 0) {
        const conflictingAccount = similarAccounts[0];
        return { 
            isValid: false, 
            error: `O nome "${accountName}" √© muito similar a "${conflictingAccount.name}" e pode causar confus√£o.`,
            suggestion: `Use um nome mais espec√≠fico como "${accountName} Pessoal" ou "${accountName} Empresarial"`
        };
    }
    
    return { isValid: true };
}

// Fun√ß√£o para extrair datas passadas das mensagens
function extractDateFromMessage(message) {
    const lowerMsg = message.toLowerCase();
    const now = new Date();
    
    // Verificar se menciona "ontem"
    if (lowerMsg.includes('ontem')) {
        const yesterday = new Date(now);
        yesterday.setDate(now.getDate() - 1);
        return {
            date: yesterday,
            type: 'yesterday',
            message: 'ontem'
        };
    }
    
    // Verificar se menciona "hoje"
    if (lowerMsg.includes('hoje')) {
        return {
            date: now,
            type: 'today',
            message: 'hoje'
        };
    }
    
    // Verificar se menciona "amanh√£"
    if (lowerMsg.includes('amanh√£') || lowerMsg.includes('amanha')) {
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);
        return {
            date: tomorrow,
            type: 'tomorrow',
            message: 'amanh√£'
        };
    }
    
    // Verificar se menciona dias espec√≠ficos da semana
    const weekDays = {
        'domingo': 0, 'segunda': 1, 'segunda-feira': 1, 'ter√ßa': 2, 'ter√ßa-feira': 2, 'terca': 2, 'terca-feira': 2,
        'quarta': 3, 'quarta-feira': 3, 'quinta': 4, 'quinta-feira': 4, 'sexta': 5, 'sexta-feira': 5,
        's√°bado': 6, 'sabado': 6, 's√°bado-feira': 6, 'sabado-feira': 6
    };
    
    for (const [dayName, dayIndex] of Object.entries(weekDays)) {
        if (lowerMsg.includes(dayName)) {
            const targetDate = new Date(now);
            const currentDay = now.getDay();
            const daysToAdd = (dayIndex - currentDay + 7) % 7;
            targetDate.setDate(now.getDate() + daysToAdd);
            
            return {
                date: targetDate,
                type: 'weekday',
                message: dayName
            };
        }
    }
    
    // Verificar se menciona datas espec√≠ficas do calend√°rio
    // Padr√µes: "dia 10/08/2025", "10/08/2025", "10-08-2025", "10.08.2025"
    const calendarDatePatterns = [
        /(?:dia\s+)?(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{4})/i, // dia 10/08/2025, 10/08/2025
        /(?:dia\s+)?(\d{1,2})[\/\-\.](\d{1,2})[\/\-\.](\d{2})/i, // dia 10/08/25, 10/08/25
        /(?:dia\s+)?(\d{1,2})\s+de\s+(\d{1,2})\s+de\s+(\d{4})/i, // dia 10 de 08 de 2025
        /(?:dia\s+)?(\d{1,2})\s+de\s+(\d{1,2})\s+de\s+(\d{2})/i  // dia 10 de 08 de 25
    ];
    
    for (const pattern of calendarDatePatterns) {
        const match = lowerMsg.match(pattern);
        if (match) {
            let day = parseInt(match[1]);
            let month = parseInt(match[2]) - 1; // M√™s come√ßa em 0 no JavaScript
            let year = parseInt(match[3]);
            
            // Se o ano tem apenas 2 d√≠gitos, assumir s√©culo 21
            if (year < 100) {
                year += 2000;
            }
            
            // Validar a data
            const targetDate = new Date(year, month, day);
            if (targetDate.getDate() === day && targetDate.getMonth() === month && targetDate.getFullYear() === year) {
                // Verificar se √© uma data passada
                if (targetDate < now) {
                    return {
                        date: targetDate,
                        type: 'past_date',
                        message: `dia ${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`
                    };
                } else if (targetDate.getTime() === now.getTime()) {
                    return {
                        date: targetDate,
                        type: 'today',
                        message: 'hoje'
                    };
                } else {
                    return {
                        date: targetDate,
                        type: 'future_date',
                        message: `dia ${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`
                    };
                }
            }
        }
    }
    
    // Nenhuma data encontrada
    return null;
}

// Fun√ß√£o para extrair hor√°rio das mensagens
function extractTimeFromMessage(message) {
    const lowerMsg = message.toLowerCase();
    
    // Padr√µes de hor√°rio: 18:00, 18 horas, 18, 18horas, 18,00
    const timePatterns = [
        /(\d{1,2}):(\d{2})/, // 18:00
        /(\d{1,2})\s*horas?/, // 18 horas
        /(\d{1,2})\s*[,.]\s*(\d{2})/, // 18,00 ou 18.00
        /^(\d{1,2})$/, // 18 (isolado)
        /(\d{1,2})\s*hrs?/, // 18hrs
        /(\d{1,2})\s*h/ // 18h
    ];
    
    for (const pattern of timePatterns) {
        const match = lowerMsg.match(pattern);
        if (match) {
            let hours = parseInt(match[1]);
            let minutes = 0;
            
            // Se tem minutos (padr√£o 18:00 ou 18,00)
            if (match[2]) {
                minutes = parseInt(match[2]);
            }
            
            // Validar hor√°rio
            if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
                return {
                    hours: hours,
                    minutes: minutes,
                    formatted: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
                };
            }
        }
    }
    
    return null;
}

// Fun√ß√£o para identificar banco a partir de texto
function identifyBank(text) {
    const lowerText = text.toLowerCase().trim();
    
    for (const [bankKey, bankInfo] of Object.entries(BANK_KNOWLEDGE)) {
        for (const name of bankInfo.names) {
            if (lowerText.includes(name)) {
                return {
                    id: bankKey,
                    name: bankInfo.names[0],
                    type: bankInfo.type,
                    category: bankInfo.category,
                    originalText: text
                };
            }
        }
    }
    
    return null;
}

// Fun√ß√£o para identificar conta fixa a partir de texto
// üîß NOVA L√ìGICA: Detecta automaticamente qualquer conta fixa registrada no sistema
async function identifyFixedBill(text, userFixedBills = []) {
    const lowerText = text.toLowerCase().trim();
    
    console.log('üîç Identificando conta fixa em:', text);
    
    try {
        // üîß PRIMEIRO: Buscar nas contas fixas registradas no sistema (prioridade m√°xima)
        if (userFixedBills && userFixedBills.length > 0) {
            console.log('üîç Verificando nas contas fixas registradas do usu√°rio...');
            
            for (const userBill of userFixedBills) {
                const userBillName = userBill.name.toLowerCase();
                
                // Verificar se o texto cont√©m o nome exato da conta fixa
                if (lowerText.includes(userBillName)) {
                    console.log('üîç ‚úÖ Conta fixa do usu√°rio encontrada:', userBill.name);
                    return {
                        id: userBill.id || userBill.name,
                        name: userBill.name,
                        category: userBill.category || 'personal',
                        commonAmounts: [userBill.amount],
                        dueDays: [userBill.dueDay || 10],
                        originalText: text,
                        isUserBill: true,
                        userBillData: userBill
                    };
                }
                
                // Verificar se o texto cont√©m parte do nome da conta fixa
                if (userBillName.includes(lowerText) || lowerText.includes(userBillName)) {
                    console.log('üîç ‚úÖ Conta fixa do usu√°rio encontrada (match parcial):', userBill.name);
                    return {
                        id: userBill.id || userBill.name,
                        name: userBill.name,
                        category: userBill.category || 'personal',
                        commonAmounts: [userBill.amount],
                        dueDays: [userBill.dueDay || 10],
                        originalText: text,
                        isUserBill: true,
                        userBillData: userBill
                    };
                }
            }
        }
        
        // üîß SEGUNDO: Se n√£o encontrou nas contas do usu√°rio, usar a base de conhecimento como fallback
        for (const [billKey, billInfo] of Object.entries(FIXED_BILLS_KNOWLEDGE)) {
            for (const synonym of billInfo.synonyms) {
                if (lowerText.includes(synonym)) {
                    console.log('üîç Conta fixa encontrada na base de conhecimento:', billKey, 'via sin√¥nimo:', synonym);
                    return {
                        id: billKey,
                        name: billInfo.synonyms[0],
                        category: billInfo.category,
                        commonAmounts: billInfo.commonAmounts,
                        dueDays: billInfo.dueDays,
                        originalText: text,
                        isUserBill: false
                    };
                }
            }
        }
        
        // Verificar se cont√©m apenas o nome de uma conta fixa comum (ex: "internet", "aluguel")
        const commonFixedBills = ['aluguel', 'condom√≠nio', 'internet', 'energia', '√°gua', 'g√°s', 'netflix', 'spotify'];
        for (const bill of commonFixedBills) {
            if (lowerText.includes(bill)) {
                console.log('üîç Conta fixa comum encontrada na base de conhecimento:', bill);
                // Buscar na base de conhecimento
                if (FIXED_BILLS_KNOWLEDGE[bill]) {
                    return {
                        id: bill,
                        name: bill,
                        category: FIXED_BILLS_KNOWLEDGE[bill].category,
                        commonAmounts: FIXED_BILLS_KNOWLEDGE[bill].commonAmounts,
                        dueDays: FIXED_BILLS_KNOWLEDGE[bill].dueDays,
                        originalText: text,
                        isUserBill: false
                    };
                }
            }
        }
        
        console.log('üîç Nenhuma conta fixa identificada em:', text);
        return null;
        
    } catch (error) {
        console.error('‚ùå Erro ao identificar conta fixa:', error);
        return null;
    }
}

// Fun√ß√£o para verificar se uma mensagem indica pagamento de conta fixa
// üîß NOVA L√ìGICA: Detecta automaticamente qualquer conta fixa registrada no sistema
async function isFixedBillPayment(message, userFixedBills = []) {
    const lowerMsg = message.toLowerCase();
    
    // Palavras que indicam pagamento
    const paymentWords = ['paguei', 'paguei', 'pago', 'pago', 'quitado', 'quitado', 'liquidado', 'liquidado'];
    
    // Verificar se cont√©m palavra de pagamento
    const hasPaymentWord = paymentWords.some(word => lowerMsg.includes(word));
    
    if (!hasPaymentWord) return false;
    
    // üîß NOVA L√ìGICA: Verificar se menciona alguma conta fixa (registrada ou conhecida)
    try {
        const identifiedBill = await identifyFixedBill(message, userFixedBills);
        if (identifiedBill) {
            console.log('üîç ‚úÖ Conta fixa identificada:', identifiedBill);
            return true;
        }
        
        // üîß FALLBACK: Verificar se cont√©m padr√µes de conta fixa conhecida
        const fixedBillPatterns = [
            /\b(aluguel|condom√≠nio|internet|energia|√°gua|g√°s|netflix|spotify)\b/i,
            /\b(conta|fatura|boleto)\s+(de\s+)?(aluguel|condom√≠nio|internet|energia|√°gua|g√°s|netflix|spotify)\b/i
        ];
        
        const hasFixedBillPattern = fixedBillPatterns.some(pattern => pattern.test(message));
        if (hasFixedBillPattern) {
            console.log('üîç Padr√£o de conta fixa conhecida encontrado na mensagem:', message);
            return true;
        }
        
        return false;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar pagamento de conta fixa:', error);
        return false;
    }
}

// Fun√ß√£o para extrair informa√ß√µes de pagamento de conta fixa
// üîß NOVA L√ìGICA: Extrai informa√ß√µes de qualquer conta fixa registrada no sistema
async function extractFixedBillPaymentInfo(message, userFixedBills = []) {
    const lowerMsg = message.toLowerCase();
    
    // üîß NOVA L√ìGICA: Identificar a conta fixa (registrada ou conhecida)
    const identifiedBill = await identifyFixedBill(message, userFixedBills);
    if (!identifiedBill) return null;
    
    // Extrair valor (se mencionado)
    let amount = extractMonetaryValue(message);
    
    // üîß NOVA L√ìGICA: Se n√£o mencionou valor mas √© uma conta fixa do usu√°rio, usar o valor registrado
    if (!amount && identifiedBill.isUserBill && identifiedBill.userBillData) {
        amount = identifiedBill.userBillData.amount;
        console.log('üîç üí∞ Usando valor da conta fixa registrada:', amount);
    }
    
    // Extrair banco usado para pagamento
    const bank = identifyBank(message);
    
    // Extrair data (se mencionada)
    let date = extractDateFromMessage(message);
    
    return {
        bill: identifiedBill,
        amount: amount,
        bank: bank,
        date: date,
        originalMessage: message
    };
}

// Fun√ß√£o para extrair banco mencionado na mensagem
function extractBankFromMessage(message) {
    const messageLower = message.toLowerCase();
    
    // Buscar por padr√µes como "com nubank", "pelo nubank", "via nubank", etc.
    for (const [bankKey, bankInfo] of Object.entries(BANK_KNOWLEDGE)) {
        for (const bankName of bankInfo.names) {
            const patterns = [
                new RegExp(`(?:com|pelo|via|no|na|pelo|atrav√©s do|atrav√©s da)\\s+${bankName.replace(/\s+/g, '\\s+')}`, 'i'),
                new RegExp(`${bankName.replace(/\s+/g, '\\s+')}\\s+(?:card|cart√£o|conta)`, 'i'),
                new RegExp(`(?:paguei|gastei|usei)\\s+(?:com|pelo|via|no|na)\\s+${bankName.replace(/\s+/g, '\\s+')}`, 'i')
            ];
            
            for (const pattern of patterns) {
                if (pattern.test(messageLower)) {
                    return bankKey;
                }
            }
        }
    }
    
    return null;
}

// Fun√ß√£o para buscar contas fixas que correspondem ao nome mencionado
function findMatchingFixedBills(billName, fixedBills = []) {
    if (!billName || !Array.isArray(fixedBills)) {
        return [];
    }
    
    const billNameLower = billName.toLowerCase();
    const matchingBills = [];
    
    for (const bill of fixedBills) {
        if (!bill || !bill.name) continue;
        
        const billNameLower2 = bill.name.toLowerCase();
        
        // Verifica√ß√£o exata
        if (billNameLower2 === billNameLower) {
            matchingBills.push(bill);
            continue;
        }
        
        // Verifica√ß√£o por similaridade
        if (billNameLower2.includes(billNameLower) || billNameLower.includes(billNameLower2)) {
            matchingBills.push(bill);
            continue;
        }
        
        // Verifica√ß√£o por sin√¥nimos conhecidos
        const billInfo = FIXED_BILLS_KNOWLEDGE[billNameLower];
        if (billInfo && billInfo.synonyms) {
            for (const synonym of billInfo.synonyms) {
                if (billNameLower2.includes(synonym.toLowerCase())) {
                    matchingBills.push(bill);
                    break;
                }
            }
        }
        
        // Verifica√ß√£o por similaridade de palavras-chave
        const billKeywords = billNameLower.split(/\s+/);
        const billNameKeywords = billNameLower2.split(/\s+/);
        
        let keywordMatches = 0;
        for (const keyword of billKeywords) {
            if (keyword.length > 2) { // Ignorar palavras muito curtas
                for (const billKeyword of billNameKeywords) {
                    if (billKeyword.length > 2 && billKeyword.includes(keyword)) {
                        keywordMatches++;
                        break;
                    }
                }
            }
        }
        
        // Se pelo menos 50% das palavras-chave correspondem, considerar como match
        if (keywordMatches > 0 && (keywordMatches / billKeywords.length) >= 0.5) {
            matchingBills.push(bill);
        }
    }
    
    return matchingBills;
}

// Fun√ß√£o para encontrar conta banc√°ria baseada no banco mencionado
export function findBankAccount(bankKey, userAccounts) {
    if (!bankKey || !userAccounts || !Array.isArray(userAccounts)) {
        return null;
    }
    
    const bankInfo = BANK_KNOWLEDGE[bankKey];
    if (!bankInfo) {
        return null;
    }
    
    // Buscar por conta que corresponda ao banco mencionado
    for (const account of userAccounts) {
        if (!account || !account.name) continue;
        
        const accountNameLower = account.name.toLowerCase();
        
        // Verificar se o nome da conta cont√©m alguma das varia√ß√µes do banco
        for (const bankName of bankInfo.names) {
            if (accountNameLower.includes(bankName.toLowerCase())) {
                return account;
            }
        }
        
        // Verificar por padr√µes comuns de nomes de contas
        if (bankKey === 'nubank' && (accountNameLower.includes('nu') || accountNameLower.includes('roxinho'))) {
            return account;
        }
        if (bankKey === 'itau' && (accountNameLower.includes('itau') || accountNameLower.includes('ita√∫'))) {
            return account;
        }
        if (bankKey === 'bradesco' && accountNameLower.includes('bradesco')) {
            return account;
        }
        if (bankKey === 'santander' && accountNameLower.includes('santander')) {
            return account;
        }
        if (bankKey === 'bb' && (accountNameLower.includes('bb') || accountNameLower.includes('banco do brasil'))) {
            return account;
        }
        if (bankKey === 'caixa' && (accountNameLower.includes('caixa') || accountNameLower.includes('cef'))) {
            return account;
        }
        if (bankKey === 'inter' && accountNameLower.includes('inter')) {
            return account;
        }
        if (bankKey === 'c6' && accountNameLower.includes('c6')) {
            return account;
        }
        if (bankKey === 'picpay' && accountNameLower.includes('picpay')) {
            return account;
        }
        if (bankKey === 'mercado pago' && (accountNameLower.includes('mercado') || accountNameLower.includes('mercadopago'))) {
            return account;
        }
    }
    
    return null;
}
