// Servi√ßo de Integra√ß√£o com Google Gemini 2.5 Flash Preview
// Substitui o sistema NLU avan√ßado por IA mais poderosa

class GeminiService {
    constructor() {
        this.apiKey = 'AIzaSyA6Ffl4D3Ju6HZ-Ly6KYZaBfdJlJ0H0g6M';
        this.apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';
        this.context = {
            userAccounts: [],
            fixedBills: [],
            recentTransactions: [],
            currentUser: null
        };
    }

    // Atualiza o contexto com dados do usu√°rio
    updateContext(userData) {
        this.context = {
            ...this.context,
            ...userData
        };
    }

    // Processa mensagem do usu√°rio usando Gemini
    async processMessage(message, userContext = {}) {
        try {
            // Atualiza contexto com dados mais recentes
            this.updateContext(userContext);

            // Monta o prompt estruturado para o Gemini
            const prompt = this.buildPrompt(message);
            
            // Chama a API do Gemini
            const response = await this.callGeminiAPI(prompt);
            
            // Processa a resposta e extrai a a√ß√£o
            const action = this.parseGeminiResponse(response, message);
            
            return action;
        } catch (error) {
            console.error('Erro ao processar mensagem com Gemini:', error);
            return this.getFallbackResponse(message);
        }
    }

    // Constr√≥i prompt estruturado para o Gemini
    buildPrompt(userMessage) {
        const accountsInfo = this.context.userAccounts.map(acc => 
            `- ${acc.name}: R$ ${acc.balance.toFixed(2)}`
        ).join('\n');

        const fixedBillsInfo = this.context.fixedBills.map(bill => 
            `- ${bill.name}: R$ ${bill.amount.toFixed(2)} (vencimento dia ${bill.dueDay})`
        ).join('\n');

        // Buscar transa√ß√µes recentes para contexto
        const recentTransactions = this.context.recentTransactions || [];
        const recentTransactionsInfo = recentTransactions.slice(0, 5).map(t => 
            `- ${t.type === 'expense' ? 'Despesa' : t.type === 'income' ? 'Receita' : 'Transfer√™ncia'}: R$ ${t.amount.toFixed(2)} - ${t.description} (${new Date(t.date).toLocaleDateString('pt-BR')})`
        ).join('\n');

        // Obter nome personalizado do usu√°rio
        const userName = this.context.customUserName || 'usu√°rio';

        return `Voc√™ √© o Dinah, um assistente financeiro inteligente que funciona DENTRO de um aplicativo de controle financeiro pessoal.

‚ö†Ô∏è CONTEXTO CR√çTICO: Voc√™ est√° funcionando dentro de um programa/aplicativo financeiro. TODAS as intera√ß√µes do usu√°rio s√£o referentes a este programa espec√≠fico. NUNCA confunda com bancos reais ou sistemas externos.

üéØ PERSONALIZA√á√ÉO: O usu√°rio gosta de ser chamado de "${userName}". Sempre que poss√≠vel, use "${userName}" nas suas respostas, especialmente ao confirmar transa√ß√µes.

üìä DADOS REAIS DO USU√ÅRIO (N√ÉO INVENTE NADA):
Contas dispon√≠veis no programa:
${accountsInfo || 'Nenhuma conta cadastrada'}

Contas fixas cadastradas:
${fixedBillsInfo || 'Nenhuma conta fixa cadastrada'}

Transa√ß√µes recentes:
${recentTransactionsInfo || 'Nenhuma transa√ß√£o recente'}

Mensagem do usu√°rio: "${userMessage}"

üîí REGRAS OBRIGAT√ìRIAS:
1. TODAS as opera√ß√µes s√£o dentro deste programa financeiro
2. NUNCA invente dados que n√£o existem
3. SEMPRE use apenas as contas listadas acima
4. Para consultas hist√≥ricas, diga que vai buscar no banco de dados
5. Se n√£o souber algo, pergunte ao usu√°rio ou diga que vai consultar os dados
6. NUNCA confunda com bancos reais (Nubank, Ita√∫, etc.) - s√£o apenas nomes de contas no programa

RESPONDA APENAS COM JSON no seguinte formato:
{
    "intent": "INTEN√á√ÉO_IDENTIFICADA",
    "amount": valor_numerico_ou_null,
    "description": "descri√ß√£o_clara_da_transa√ß√£o",
    "fromAccount": "nome_da_conta_origem_ou_null",
    "toAccount": "nome_da_conta_destino_ou_null", 
    "fixedBillName": "nome_da_conta_fixa_ou_null",
    "category": "categoria_apropriada_ou_null",
    "confidence": 0.0_a_1.0,
    "response": "resposta_amig√°vel_e_clara_para_o_usu√°rio",
    "needsDatabaseQuery": true_ou_false,
    "queryType": "tipo_de_consulta_ou_null",
    "dateReference": "hoje|ontem|anteontem|null"
}

EXEMPLOS ESPEC√çFICOS:

Usu√°rio: "Oi Dinah"
{
    "intent": "GREETING",
    "amount": null,
    "description": null,
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": null,
    "confidence": 0.99,
    "response": "Ol√°! Sou o Dinah, seu assistente financeiro. Como posso ajud√°-lo hoje?",
    "needsDatabaseQuery": false,
    "queryType": null
}

Usu√°rio: "Gastei 50 reais no mercado"
{
    "intent": "ADD_EXPENSE",
    "amount": 50,
    "description": "Mercado",
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": "alimenta√ß√£o",
    "confidence": 0.95,
    "response": "${userName}, registrei sua despesa de R$ 50,00 no mercado. De qual conta voc√™ quer debitar?",
    "needsDatabaseQuery": false,
    "queryType": null,
    "dateReference": "hoje"
}

Usu√°rio: "gastei 30 reais ontem na farm√°cia"
{
    "intent": "ADD_EXPENSE",
    "amount": 30,
    "description": "farm√°cia",
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": "saude",
    "confidence": 0.95,
    "response": "${userName}, registrei sua despesa de R$ 30,00 de ontem na farm√°cia. De qual conta voc√™ quer debitar?",
    "needsDatabaseQuery": false,
    "queryType": null,
    "dateReference": "ontem"
}

Usu√°rio: "Quanto gastei ontem?"
{
    "intent": "QUERY_TRANSACTIONS",
    "amount": null,
    "description": null,
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": null,
    "confidence": 0.98,
    "response": "Vou consultar seus gastos de ontem no banco de dados...",
    "needsDatabaseQuery": true,
    "queryType": "expenses_by_date"
}

Usu√°rio: "Transferi 100 reais do Nubank para Ita√∫"
{
    "intent": "PERFORM_TRANSFER",
    "amount": 100,
    "description": "Transfer√™ncia entre contas",
    "fromAccount": "Nubank",
    "toAccount": "Ita√∫", 
    "fixedBillName": null,
    "category": null,
    "confidence": 0.98,
    "response": "Perfeito! Vou transferir R$ 100,00 do Nubank para o Ita√∫.",
    "needsDatabaseQuery": false,
    "queryType": null
}

Usu√°rio: "tenho alguma conta fixa que n√£o paguei?"
{
    "intent": "QUERY_FIXED_BILLS",
    "amount": null,
    "description": null,
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": null,
    "confidence": 0.95,
    "response": "Vou consultar suas contas fixas no banco de dados...",
    "needsDatabaseQuery": true,
    "queryType": "unpaid_bills"
}

Usu√°rio: "me d√™ um resumo financeiro completo"
{
    "intent": "QUERY_FINANCIAL_SUMMARY",
    "amount": null,
    "description": null,
    "fromAccount": null,
    "toAccount": null,
    "fixedBillName": null,
    "category": null,
    "confidence": 0.98,
    "response": "Pri, vou preparar um resumo financeiro completo para voc√™...",
    "needsDatabaseQuery": true,
    "queryType": "financial_summary"
}

Responda APENAS com o JSON, sem texto adicional.`;
    }

    // Chama a API do Gemini
    async callGeminiAPI(prompt) {
        try {
            const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }],
                    generationConfig: {
                        temperature: 0.1,
                        topK: 1,
                        topP: 0.8,
                        maxOutputTokens: 1024,
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(`Erro na API do Gemini: ${response.status} - ${errorData.error?.message || response.statusText}`);
            }

            const data = await response.json();
            
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Resposta inv√°lida da API do Gemini');
            }

            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            console.error('Erro ao chamar API do Gemini:', error);
            
            // Retry logic para erros tempor√°rios
            if (error.message.includes('500') || error.message.includes('503') || error.message.includes('timeout')) {
                console.log('Tentando novamente em 2 segundos...');
                await new Promise(resolve => setTimeout(resolve, 2000));
                return this.callGeminiAPI(prompt);
            }
            
            throw error;
        }
    }

    // Processa resposta do Gemini e converte para formato esperado
    parseGeminiResponse(geminiResponse, originalMessage = '') {
        try {
            // Limpa a resposta e extrai apenas o JSON
            const cleanResponse = geminiResponse.trim();
            const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
            
            if (!jsonMatch) {
                throw new Error('Resposta do Gemini n√£o cont√©m JSON v√°lido');
            }

            const parsedResponse = JSON.parse(jsonMatch[0]);
            
            // Converte para formato esperado pelo sistema
        return {
            intent: parsedResponse.intent,
            entities: {
                amount: parsedResponse.amount,
                description: parsedResponse.description,
                fromAccount: parsedResponse.fromAccount,
                toAccount: parsedResponse.toAccount,
                fixedBillName: parsedResponse.fixedBillName,
                category: parsedResponse.category,
                dateReference: parsedResponse.dateReference
            },
            confidence: parsedResponse.confidence || 0.8,
            response: parsedResponse.response,
            needsDatabaseQuery: parsedResponse.needsDatabaseQuery || false,
            queryType: parsedResponse.queryType || null,
            rawResponse: geminiResponse
        };
        } catch (error) {
            console.error('Erro ao processar resposta do Gemini:', error);
            return this.getFallbackResponse(originalMessage);
        }
    }

    // Resposta de fallback em caso de erro
    getFallbackResponse(originalMessage = '') {
        // Tentativa de an√°lise b√°sica local como fallback
        const fallbackResult = this.analyzeMessageLocally(originalMessage);
        
        return {
            intent: fallbackResult.intent,
            entities: fallbackResult.entities,
            confidence: 0.3, // Baixa confian√ßa para fallback
            response: fallbackResult.response || 'Desculpe, n√£o consegui processar sua mensagem. Pode tentar novamente de forma mais espec√≠fica?',
            needsDatabaseQuery: false,
            queryType: null,
            rawResponse: 'Fallback local'
        };
    }

    // An√°lise b√°sica local como fallback quando a API falha
    analyzeMessageLocally(message) {
        const lowerMessage = message.toLowerCase();
        
        // Detectar despesas
        if (lowerMessage.includes('gastei') || lowerMessage.includes('paguei') || lowerMessage.includes('comprei')) {
            const amountMatch = message.match(/(\d+(?:[.,]\d+)?)/);
            return {
                intent: 'ADD_EXPENSE',
                entities: {
                    amount: amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null,
                    description: 'Despesa',
                    fromAccount: null,
                    toAccount: null,
                    fixedBillName: null,
                    category: 'outros'
                },
                response: amountMatch ? 
                    `Registrei sua despesa de R$ ${amountMatch[1]}. De qual conta voc√™ quer debitar?` :
                    'Por favor, informe o valor da despesa.'
            };
        }
        
        // Detectar receitas
        if (lowerMessage.includes('recebi') || lowerMessage.includes('ganhei') || lowerMessage.includes('entrou')) {
            const amountMatch = message.match(/(\d+(?:[.,]\d+)?)/);
            return {
                intent: 'ADD_INCOME',
                entities: {
                    amount: amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null,
                    description: 'Receita',
                    fromAccount: null,
                    toAccount: null,
                    fixedBillName: null,
                    category: 'outros'
                },
                response: amountMatch ? 
                    `Registrei sua receita de R$ ${amountMatch[1]}. Em qual conta voc√™ quer creditar?` :
                    'Por favor, informe o valor da receita.'
            };
        }
        
        // Detectar consulta de saldo
        if (lowerMessage.includes('saldo') || lowerMessage.includes('quanto tenho')) {
            return {
                intent: 'QUERY_BALANCE',
                entities: {
                    amount: null,
                    description: null,
                    fromAccount: null,
                    toAccount: null,
                    fixedBillName: null,
                    category: null
                },
                response: 'Vou consultar seus saldos...'
            };
        }
        
        // Detectar transfer√™ncias
        if (lowerMessage.includes('transferi') || lowerMessage.includes('movi')) {
            const amountMatch = message.match(/(\d+(?:[.,]\d+)?)/);
            return {
                intent: 'PERFORM_TRANSFER',
                entities: {
                    amount: amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : null,
                    description: 'Transfer√™ncia',
                    fromAccount: null,
                    toAccount: null,
                    fixedBillName: null,
                    category: null
                },
                response: amountMatch ? 
                    `Registrei sua transfer√™ncia de R$ ${amountMatch[1]}. Especifique as contas de origem e destino.` :
                    'Por favor, informe o valor da transfer√™ncia.'
            };
        }
        
        // Fallback gen√©rico
        return {
            intent: 'GREETING',
            entities: {
                amount: null,
                description: null,
                fromAccount: null,
                toAccount: null,
                fixedBillName: null,
                category: null
            },
            response: 'Ol√°! Como posso ajud√°-lo com suas finan√ßas hoje?'
        };
    }

    // M√©todo para testar a conex√£o com a API
    async testConnection() {
        try {
            const testResponse = await this.callGeminiAPI('Responda apenas: "Conex√£o OK"');
            return testResponse.includes('Conex√£o OK');
        } catch (error) {
            console.error('Erro no teste de conex√£o:', error);
            return false;
        }
    }
}

// Inst√¢ncia global do servi√ßo
const geminiService = new GeminiService();

// Fun√ß√£o principal para processar mensagens (substitui processMessageAdvanced)
export async function processMessageWithGemini(message, userContext = {}) {
    return await geminiService.processMessage(message, userContext);
}

// Fun√ß√£o para atualizar contexto do usu√°rio
export function updateGeminiContext(userData) {
    geminiService.updateContext(userData);
}

// Fun√ß√£o para testar conex√£o
export async function testGeminiConnection() {
    return await geminiService.testConnection();
}

export default geminiService;
